/** \page stldoc_replace_copy replace_copy

<table cellpadding="0" cellspacing="0" width="100%" border="0">
<tr>
<td align="left">\image html algorithms.gif</td>
<td width="100%"></td>
<td align="right">\image html function.gif</td>
</tr>
<tr>
<td align="left" valign="top"><b>Category</b>: algorithms</td>
<td width="100%"></td>
<td align="right" valign="top"><b>Component type</b>: function</td>
</tr>
</table>

\section Prototype Prototype
\code
template <class InputIterator, class OutputIterator, class T>
OutputIterator replace_copy(InputIterator first, InputIterator last,
                            OutputIterator result, const T& old_value,
                            const T& new_value);
\endcode
\section Description Description
<code>Replace_copy</code> copies elements from the range <code>[first, last)</code> to
the range <code>[result, result + (last-first))</code>, except that any element
equal to <code>old_value</code> is not copied; <code>new_value</code> is copied instead.
More precisely, for every integer <code>n</code> such that <code>0 &lt;= n &lt; last-first</code>,
<code>replace_copy</code> performs the assignment <code>*(result+n) = new_value</code>
if <code>*(first+n) == old_value</code>, and <code>*(result+n) = *(first+n)</code> 
otherwise.
\section Definition Definition
Defined in the standard header <A href="algorithm">algorithm</A>, and in the nonstandard
backward-compatibility header <A href="algo.h">algo.h</A>.
\section Requirements_on_types Requirements on types
<ul>
<li>
<code>InputIterator</code> is a model of \ref stldoc_InputIterator.
<li>
<code>OutputIterator</code> is a model of \ref stldoc_OutputIterator.
<li>
<code>T</code> is \ref stldoc_EqualityComparable, and may be compared for equality with
   objects of <code>InputIterator</code>'s value type.
<li>
<code>T</code> is \ref stldoc_Assignable.
<li>
<code>T</code> is convertible to a type in <code>OutputIterator</code>'s set of value types.
</ul>
\section Preconditions Preconditions
<ul>
<li>
<code>[first, last)</code> is a valid range.
<li>
There is enough space in the output range to store the copied
   values.  That is, <code>[result, result + (last-first))</code> is a valid range.
<li>
<code>result</code> is not an iterator within the range <code>[first, last)</code>.
</ul>
\section Complexity Complexity
Linear.  <code>Replace_copy</code> performs exactly <code>last - first</code> comparisons for 
equality and exactly <code>last - first</code> assignments.
\section Example Example
\code
Vector<int> V1;
V1.push_back(1);
V1.push_back(2);
V1.push_back(3);
V1.push_back(1);

Vector<int> V2(4);

replace_copy(V1.begin(), V1.end(), V2.begin(), 1, 99);
assert(V[0] == 99 && V[1] == 2 && V[2] == 3 && V[3] == 99);
\endcode
\section Notes Notes
\section See_also See also
<code>\ref stldoc_copy</code>, <code>\ref stldoc_replace</code>, <code>\ref stldoc_replace_if</code>, <code>\ref stldoc_replace_copy_if</code>


*/
