/** \page stldoc_BidirectionalIterator BidirectionalIterator

<table cellpadding="0" cellspacing="0" width="100%" border="0">
<tr>
<td align="left">\image html iterators.gif</td>
<td width="100%"></td>
<td align="right">\image html concept.gif</td>
</tr>
<tr>
<td align="left" valign="top"><b>Category</b>: iterators</td>
<td width="100%"></td>
<td align="right" valign="top"><b>Component type</b>: concept</td>
</tr>
</table>

\section Description Description
A Bidirectional Iterator is an iterator that can be both incremented
and decremented.  The requirement that a Bidirectional Iterator
can be decremented is the only thing that distinguishes 
Bidirectional Iterators from \ref stldoc_ForwardIterator.
\section Refinement_of Refinement of
\ref stldoc_ForwardIterator
\section Associated_types Associated types
The same as for \ref stldoc_ForwardIterator.
\section Notation Notation
<table>
<tr>
<td valign="top">
<code>X</code>
</td>
<td valign="top">
A type that is a model of Bidirectional Iterator
</td>
</tr>
<tr>
<td valign="top">
<code>T</code>
</td>
<td valign="top">
The value type of <code>X</code>
</td>
</tr>
<tr>
<td valign="top">
<code>i</code>, <code>j</code>
</td>
<td valign="top">
Object of type <code>X</code>
</td>
</tr>
<tr>
<td valign="top">
<code>t</code>
</td>
<td valign="top">
Object of type <code>T</code>
</td>
</tr>
</table>
\section Definitions Definitions
\section Valid_expressions Valid expressions
In addition to the expressions defined in \ref stldoc_ForwardIterator, the
following expressions must be valid.
<table border="1" cellpadding="3" cellspacing="3">
<tr>
<TH>
Name
</TH>
<TH>
Expression
</TH>
<TH>
Type requirements
</TH>
<TH>
Return type
</TH>
</tr>
<tr>
<td valign="top">
Predecrement
</td>
<td valign="top">
<code>--i</code>
</td>
<td valign="top">
&nbsp;
</td>
<td valign="top">
<code>X&amp;</code>
</td>
</tr>
<tr>
<td valign="top">
Postdecrement
</td>
<td valign="top">
<code>i--</code>
</td>
<td valign="top">
&nbsp;
</td>
<td valign="top">
<code>X</code>
</td>
</tr>
</table>
\section Expression_Semantics Expression Semantics
Semantics of an expression is defined only where it is not defined in
\ref stldoc_ForwardIterator.
<table border="1" cellpadding="3" cellspacing="3">
<tr>
<TH>
Name
</TH>
<TH>
Expression
</TH>
<TH>
Precondition
</TH>
<TH>
Semantics
</TH>
<TH>
Postcondition
</TH>
</tr>
<tr>
<td valign="top">
Predecrement
</td>
<td valign="top">
<code>--i</code>
</td>
<td valign="top">
<code>i</code> is dereferenceable or past-the-end.  There exists a
   dereferenceable iterator <code>j</code> such that <code>i == ++j</code>.
</td>
<td valign="top">
<code>i</code> is modified to point to the previous element.
</td>
<td valign="top">
<code>i</code> is dereferenceable.  <code>&amp;i = &amp;--i</code>.  If <code>i == j</code>, then
   <code>--i == --j</code>.  If <code>j</code> is dereferenceable and <code>i == ++j</code>, 
   then <code>--i == j</code>.
</td>
</tr>
<tr>
<td valign="top">
Postdecrement
</td>
<td valign="top">
<code>i--</code>
</td>
<td valign="top">
<code>i</code> is dereferenceable or past-the-end.  There exists a
   dereferenceable iterator <code>j</code> such that <code>i == ++j</code>.
</td>
<td valign="top">
Equivalent to
\code
{ 
  X tmp = i; 
  --i; 
  return tmp; 
}
\endcode
</td>
<td valign="top">
&nbsp;
</td>
</tr>
</table>
\section Complexity_guarantees Complexity guarantees
The complexity of operations on bidirectional iterators is
guaranteed to be amortized constant time.
\section Invariants Invariants
<table border="1" cellpadding="3" cellspacing="3">
<tr>
<td valign="top">
Symmetry of increment and decrement
</td>
<td valign="top">
If <code>i</code> is dereferenceable, then <code>++i; --i;</code> is a null operation.
   Similarly, <code>--i; ++i;</code> is a null operation.
</td>
</tr>
</table>
\section Models Models
<ul>
<li>
<code>T*</code>
<li>
<code>\ref stldoc_List&lt;T&gt;::iterator</code>
</ul>
\section Notes Notes
\section See_also See also
\ref stldoc_InputIterator, \ref stldoc_OutputIterator, \ref stldoc_ForwardIterator,
\ref stldoc_RandomAccessIterator, \ref stldoc_Iterators


*/
