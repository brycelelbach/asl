/** \page stldoc_Vector Vector

<table cellpadding="0" cellspacing="0" width="100%" border="0">
<tr>
<td align="left">\image html containers.gif</td>
<td width="100%"></td>
<td align="right">\image html type.gif</td>
</tr>
<tr>
<td align="left" valign="top"><b>Category</b>: containers</td>
<td width="100%"></td>
<td align="right" valign="top"><b>Component type</b>: type</td>
</tr>
</table>

\section Description Description
A <code>vector</code> is a \ref stldoc_Sequence that
supports random access to elements, constant time insertion and
removal of elements at the end, and linear time insertion and removal
of elements at the beginning or in the middle.  The number of elements
in a <code>vector</code> may vary dynamically; memory management is
automatic.  <code>Vector</code> is the simplest of the STL container
classes, and in many cases the most efficient.
\section Example Example
\code
vector<int> V;
V.insert(V.begin(), 3);
assert(V.size() == 1 && V.capacity() >= 1 && V[0] == 3);
\endcode
\section Definition Definition
Defined in the standard header <A href="vector">vector</A>, and in the nonstandard
backward-compatibility header <A href="vector.h">vector.h</A>.
\section Template_parameters Template parameters
<table border="1" cellpadding="3" cellspacing="3">
<tr>
<TH>
Parameter
</TH>
<TH>
Description
</TH>
<TH>
Default
</TH>
</tr>
<tr>
<td valign="top">
<code>T</code>
</td>
<td valign="top">
The vector's value type: the type of object that is stored
   in the vector.
</td>
<td valign="top">
&nbsp;
</td>
</tr>
<tr>
<td valign="top">
<code>Alloc</code>
</td>
<td valign="top">
The <code>vector</code>'s allocator, used for all internal memory management.
</td>
<td valign="top">
<code>\ref stldoc_Allocators</code>
</td>
</tr>
</table>
\section Model_of Model of
\ref stldoc_RandomAccessContainer, 
\ref stldoc_BackInsertionSequence.
\section Type_requirements Type requirements
None, except for those imposed by the requirements of 
\ref stldoc_RandomAccessContainer 
and \ref stldoc_BackInsertionSequence.
\section Public_base_classes Public base classes
None.  
\section Members Members
<table border="1" cellpadding="3" cellspacing="3">
<tr>
<TH>
Member
</TH>
<TH>
Where defined
</TH>
<TH>
Description
</TH>
</tr>
<tr>
<td valign="top">
<code>value_type</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
The type of object, <code>T</code>, stored in the vector.
</td>
</tr>
<tr>
<td valign="top">
<code>pointer</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
Pointer to <code>T</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>reference</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
Reference to <code>T</code>
</td>
</tr>
<tr>
<td valign="top">
<code>const_reference</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
Const reference to <code>T</code>
</td>
</tr>
<tr>
<td valign="top">
<code>size_type</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
An unsigned integral type.
</td>
</tr>
<tr>
<td valign="top">
<code>difference_type</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
A signed integral type.
</td>
</tr>
<tr>
<td valign="top">
<code>iterator</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
Iterator used to iterate through a <code>vector</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>const_iterator</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
Const iterator used to iterate through a <code>vector</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>reverse_iterator</code>
</td>
<td valign="top">
 \ref stldoc_ReversibleContainer
</td>
<td valign="top">
Iterator used to iterate backwards through a <code>vector</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>const_reverse_iterator</code>
</td>
<td valign="top">
 \ref stldoc_ReversibleContainer
</td>
<td valign="top">
Const iterator used to iterate backwards through a <code>vector</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>iterator begin()</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
Returns an <code>iterator</code> pointing to the beginning of the <code>vector</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>iterator end()</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
Returns an <code>iterator</code> pointing to the end of the <code>vector</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>const_iterator begin() const</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
Returns a <code>const_iterator</code> pointing to the beginning of the <code>vector</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>const_iterator end() const</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
Returns a <code>const_iterator</code> pointing to the end of the <code>vector</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>reverse_iterator rbegin()</code>
</td>
<td valign="top">
 \ref stldoc_ReversibleContainer
</td>
<td valign="top">
Returns a <code>reverse_iterator</code> pointing to the beginning of the
   reversed vector.
</td>
</tr>
<tr>
<td valign="top">
<code>reverse_iterator rend()</code>
</td>
<td valign="top">
 \ref stldoc_ReversibleContainer
</td>
<td valign="top">
Returns a <code>reverse_iterator</code> pointing to the end of the
   reversed vector.
</td>
</tr>
<tr>
<td valign="top">
<code>const_reverse_iterator rbegin() const</code>
</td>
<td valign="top">
 \ref stldoc_ReversibleContainer
</td>
<td valign="top">
Returns a <code>const_reverse_iterator</code> pointing to the beginning of the
   reversed vector.
</td>
</tr>
<tr>
<td valign="top">
<code>const_reverse_iterator rend() const</code>
</td>
<td valign="top">
 \ref stldoc_ReversibleContainer
</td>
<td valign="top">
Returns a <code>const_reverse_iterator</code> pointing to the end of the
   reversed vector.
</td>
</tr>
<tr>
<td valign="top">
<code>size_type size() const</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
Returns the size of the <code>vector</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>size_type max_size() const</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
Returns the largest possible size of the <code>vector</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>size_type capacity() const</code>
</td>
<td valign="top">
<code>vector</code>
</td>
<td valign="top">
See below.
</td>
</tr>
<tr>
<td valign="top">
<code>bool empty() const</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
<code>true</code> if the <code>vector</code>'s size is <code>0</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>reference operator[](size_type n)</code>
</td>
<td valign="top">
 \ref stldoc_RandomAccessContainer
</td>
<td valign="top">
Returns the <code>n</code>'th element.
</td>
</tr>
<tr>
<td valign="top">
<code>const_reference operator[](size_type n) const</code>
</td>
<td valign="top">
 \ref stldoc_RandomAccessContainer
</td>
<td valign="top">
Returns the <code>n</code>'th element.
</td>
</tr>
<tr>
<td valign="top">
<code>vector()</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
Creates an empty vector.
</td>
</tr>
<tr>
<td valign="top">
<code>vector(size_type n)</code>
</td>
<td valign="top">
 \ref stldoc_Sequence
</td>
<td valign="top">
Creates a vector with <code>n</code> elements.
</td>
</tr>
<tr>
<td valign="top">
<code>vector(size_type n, const T&amp; t)</code>
</td>
<td valign="top">
 \ref stldoc_Sequence
</td>
<td valign="top">
Creates a vector with <code>n</code> copies of <code>t</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>vector(const vector&amp;)</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
The copy constructor.
</td>
</tr>
<tr>
<td valign="top">
\code
template <class InputIterator>
vector(InputIterator, InputIterator)
\endcode
<A href="#1">[1]</A>
</td>
<td valign="top">
 \ref stldoc_Sequence
</td>
<td valign="top">
Creates a vector with a copy of a range.
</td>
</tr>
<tr>
<td valign="top">
<code>~vector()</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
The destructor.
</td>
</tr>
<tr>
<td valign="top">
<code>vector&amp; operator=(const vector&amp;)</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
The assignment operator
</td>
</tr>
<tr>
<td valign="top">
<code>void reserve(size_t)</code>
</td>
<td valign="top">
<code>vector</code>
</td>
<td valign="top">
See below.
</td>
</tr>
<tr>
<td valign="top">
<code>reference front()</code>
</td>
<td valign="top">
 \ref stldoc_Sequence
</td>
<td valign="top">
Returns the first element.
</td>
</tr>
<tr>
<td valign="top">
<code>const_reference front() const</code>
</td>
<td valign="top">
 \ref stldoc_Sequence
</td>
<td valign="top">
Returns the first element.
</td>
</tr>
<tr>
<td valign="top">
<code>reference back()</code>
</td>
<td valign="top">
 \ref stldoc_BackInsertionSequence
</td>
<td valign="top">
Returns the last element.
</td>
</tr>
<tr>
<td valign="top">
<code>const_reference back() const</code>
</td>
<td valign="top">
 \ref stldoc_BackInsertionSequence
</td>
<td valign="top">
Returns the last element.
</td>
</tr>
<tr>
<td valign="top">
<code>void push_back(const T&amp;)</code>
</td>
<td valign="top">
 \ref stldoc_BackInsertionSequence
</td>
<td valign="top">
Inserts a new element at the end.
</td>
</tr>
<tr>
<td valign="top">
<code>void pop_back()</code>
</td>
<td valign="top">
 \ref stldoc_BackInsertionSequence
</td>
<td valign="top">
Removes the last element.
</td>
</tr>
<tr>
<td valign="top">
<code>void swap(vector&amp;)</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
Swaps the contents of two vectors.
</td>
</tr>
<tr>
<td valign="top">
\code
iterator insert(iterator pos,
                const T& x)
\endcode
</td>
<td valign="top">
 \ref stldoc_Sequence
</td>
<td valign="top">
Inserts <code>x</code> before <code>pos</code>.
</td>
</tr>
<tr>
<td valign="top">
\code
template <class InputIterator>
void insert(iterator pos,
            InputIterator f, InputIterator l)
\endcode
<A href="#1">[1]</A>
</td>
<td valign="top">
 \ref stldoc_Sequence
</td>
<td valign="top">
Inserts the range <code>[first, last)</code> before <code>pos</code>.
</td>
</tr>
<tr>
<td valign="top">
\code
void insert(iterator pos, 
            size_type n, const T& x)
\endcode
</td>
<td valign="top">
 \ref stldoc_Sequence
</td>
<td valign="top">
Inserts <code>n</code> copies of <code>x</code> before <code>pos</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>iterator erase(iterator pos)</code>
</td>
<td valign="top">
 \ref stldoc_Sequence
</td>
<td valign="top">
Erases the element at position <code>pos</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>iterator erase(iterator first, iterator last)</code>
</td>
<td valign="top">
 \ref stldoc_Sequence
</td>
<td valign="top">
Erases the range <code>[first, last)</code>
</td>
</tr>
<tr>
<td valign="top">
<code>void clear()</code>
</td>
<td valign="top">
 \ref stldoc_Sequence
</td>
<td valign="top">
Erases all of the elements.
</td>
</tr>
<tr>
<td valign="top">
<code>void resize(n, t = T())</code>
</td>
<td valign="top">
 \ref stldoc_Sequence
</td>
<td valign="top">
Inserts or erases elements at the end such that the size becomes <code>n</code>.
</td>
</tr>
<tr>
<td valign="top">
\code
bool operator==(const vector&, 
                const vector&)
\endcode
</td>
<td valign="top">
 \ref stldoc_ForwardContainer
</td>
<td valign="top">
Tests two vectors for equality.  This is a global function, not
   a member function.
</td>
</tr>
<tr>
<td valign="top">
\code
bool operator<(const vector&, 
               const vector&)
\endcode
</td>
<td valign="top">
 \ref stldoc_ForwardContainer
</td>
<td valign="top">
Lexicographical comparison.  This is a global function, not
   a member function.
</td>
</tr>
</table>
\section New_members New members
These members are not defined in the 
\ref stldoc_RandomAccessContainer 
and \ref stldoc_BackInsertionSequence
requirements, but are specific to <code>vector</code>.
<table border="1" cellpadding="3" cellspacing="3">
<tr>
<TH>
Member
</TH>
<TH>
Description
</TH>
</tr>
<tr>
<td valign="top">
<code>size_type capacity() const</code>
</td>
<td valign="top">
Number of elements for which memory has been allocated.
   <code>capacity()</code> is always greater than or equal to <code>size()</code>.
   <A href="#2">[2]</A> <A href="#3">[3]</A>
</td>
</tr>
<tr>
<td valign="top">
<code>void reserve(size_type n)</code>
</td>
<td valign="top">
If <code>n</code> is less than or equal to <code>capacity()</code>, this call has no effect.
    Otherwise, it is a request for allocation of additional 
    memory.  If the request is successful, then <code>capacity()</code> is
    greater than or equal to <code>n</code>; otherwise, <code>capacity()</code> is unchanged.
    In either case, <code>size()</code> is unchanged.  
    <A href="#2">[2]</A> <A href="#4">[4]</A>
</td>
</tr>
</table>
\section Notes Notes
<p><A name="1">[1]</A>
This member function relies on <i>member template</i> functions, which
at present (early 1998) are not supported by all compilers.  If your
compiler supports member templates, you can call this function with
any type of \ref stldoc_InputIterator.  If your
compiler does not yet support member templates, though, then the
arguments must be of type <code>const value_type*</code>.
<p><A name="2">[2]</A>
Memory will be reallocated automatically if more than <code>capacity() -
size()</code> elements are inserted into the vector.  Reallocation does
not change <code>size()</code>, nor does it change the values of any
elements of the vector.  It does, however, increase
<code>capacity()</code>, and it invalidates <A href="#5">[5]</A> any
iterators that point into the vector.
<p><A name="3">[3]</A>
When it is necessary to increase <code>capacity()</code>, <code>vector</code>
usually increases it by a factor of two.  It is crucial that the
amount of growth is proportional to the current <code>capacity()</code>,
rather than a fixed constant: in the former case inserting a series of
elements into a vector is a linear time operation, and in the latter
case it is quadratic.
<p><A name="4">[4]</A>
<code>Reserve()</code> causes a reallocation manually.  The main reason
for using <code>reserve()</code> is efficiency: if you know the capacity
to which your <code>vector</code> must eventually grow, then it is usually
more efficient to allocate that memory all at once rather than relying
on the automatic reallocation scheme.  The other reason for using
<code>reserve()</code> is so that you can control the invalidation of
iterators. <A href="#5">[5]</A>
<p><A name="5">[5]</A>
A vector's iterators are invalidated when its memory is reallocated.
Additionally, inserting or deleting an element in the middle of a
vector invalidates all iterators that point to elements following the
insertion or deletion point.  It follows that you can prevent a
vector's iterators from being invalidated if you use
<code>reserve()</code> to preallocate as much memory as the vector will
ever use, and if all insertions and deletions are at the vector's end.
\section See_also See also
\ref stldoc_Deque, 
\ref stldoc_List, 
\ref stldoc_Slist


*/
