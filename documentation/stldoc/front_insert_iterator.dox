/** \page stldoc_front_insert_iterator front_insert_iterator

<table cellpadding="0" cellspacing="0" width="100%" border="0">
<tr>
<td align="left">\image html iterators.gif</td>
<td align="right">\image html type.gif</td>
</tr>
<tr>
<td align="left">\image html adaptors.gif</td>
<td align="right"></td>
</tr>
<tr>
<td align="left" valign="top"><b>Categories</b> : iterators, adaptors</td>
<td align="right" valign="top"><b>Component type</b>: type</td>
</tr>
</table>

\section Description Description
<code>Front_insert_iterator</code> is an iterator adaptor that functions as an
\ref stldoc_OutputIterator : assignment through a <code>front_insert_iterator</code> inserts
an object before the first element of a \ref stldoc_FrontInsertionSequence. <A href="#1">[1]</A> <A href="#2">[2]</A>
\section Example Example
\code
List<int> L;
L.push_front(3);
front_insert_iterator<List<int> > ii(L);
*ii++ = 0;
*ii++ = 1;
*ii++ = 2;
copy(L.begin(), L.end(), ostream_iterator<int>(cout, " "));
// The values that are printed are 2 1 0 3
\endcode
\section Definition Definition
Defined in the standard header <A href="iterator">iterator</A>, and in the nonstandard
backward-compatibility header <A href="iterator.h">iterator.h</A>.
\section Template_parameters Template parameters
<table border="1" cellpadding="3" cellspacing="3">
<tr>
<TH>
Parameter
</TH>
<TH>
Description
</TH>
<TH>
Default
</TH>
</tr>
<tr>
<td valign="top">
<code>FrontInsertionSequence</code>
</td>
<td valign="top">
The type of \ref stldoc_FrontInsertionSequence into which values will be inserted.
</td>
<td valign="top">
&nbsp;
</td>
</tr>
</table>
\section Model_of Model of
\ref stldoc_OutputIterator.  A front insert iterator's set of value types (as
defined in the \ref stldoc_OutputIterator requirements) consists of
a single type : <code>FrontInsertionSequence::value_type</code>.
\section Type_requirements Type requirements
The template parameter <code>FrontInsertionSequence</code> must be a 
\ref stldoc_FrontInsertionSequence.
\section Public_base_classes Public base classes
None.
\section Members Members
<table border="1" cellpadding="3" cellspacing="3">
<tr>
<TH>
Member
</TH>
<TH>
Where defined
</TH>
<TH>
Description
</TH>
</tr>
<tr>
<td valign="top">
<code>front_insert_iterator(FrontInsertionSequence&amp;)</code>
</td>
<td valign="top">
<code>front_insert_iterator</code>
</td>
<td valign="top">
See below.
</td>
</tr>
<tr>
<td valign="top">
<code>front_insert_iterator(const front_insert_iterator&amp;)</code>
</td>
<td valign="top">
 \ref stldoc_trivial
</td>
<td valign="top">
The copy constructor
</td>
</tr>
<tr>
<td valign="top">
\code
front_insert_iterator& 
operator=(const front_insert_iterator&)
\endcode
</td>
<td valign="top">
 \ref stldoc_trivial
</td>
<td valign="top">
The assignment operator
</td>
</tr>
<tr>
<td valign="top">
<code>front_insert_iterator&amp; operator*()</code>
</td>
<td valign="top">
 \ref stldoc_OutputIterator
</td>
<td valign="top">
Used to implement the \ref stldoc_OutputIterator expression <code>*i = x</code>. <A href="#3">[3]</A>
</td>
</tr>
<tr>
<td valign="top">
\code
front_insert_iterator& 
operator=(const FrontInsertionSequence ::value_type&)
\endcode
</td>
<td valign="top">
 \ref stldoc_OutputIterator
</td>
<td valign="top">
Used to implement the \ref stldoc_OutputIterator expression <code>*i = x</code>. <A href="#3">[3]</A>
</td>
</tr>
<tr>
<td valign="top">
<code>front_insert_iterator&amp; operator++()</code>
</td>
<td valign="top">
 \ref stldoc_OutputIterator
</td>
<td valign="top">
Preincrement.
</td>
</tr>
<tr>
<td valign="top">
<code>front_insert_iterator&amp; operator++(int)</code>
</td>
<td valign="top">
 \ref stldoc_OutputIterator
</td>
<td valign="top">
Postincrement.
</td>
</tr>
<tr>
<td valign="top">
\code
output_iterator_tag 
iterator_category(const front_insert_iterator&)
\endcode
</td>
<td valign="top">
 \ref stldoc_iterator_tags
</td>
<td valign="top">
Returns the iterator's category.
   This is a global function, not a member.
</td>
</tr>
<tr>
<td valign="top">
\code
template<class FrontInsertionSequence>
front_insert_iterator<FrontInsertionSequence>
front_inserter(FrontInsertionSequence& S)
\endcode
</td>
<td valign="top">
<code>front_insert_iterator</code>
</td>
<td valign="top">
See below.
</td>
</tr>
</table>
\section New_members. New members.
These members are not defined 
in the \ref stldoc_OutputIterator requirements,
but are specific to <code>front_insert_iterator</code>.
<table border="1" cellpadding="3" cellspacing="3">
<tr>
<TH>
Member
</TH>
<TH>
Description
</TH>
</tr>
<tr>
<td valign="top">
<code>front_insert_iterator(FrontInsertionSequence&amp; S)</code>
</td>
<td valign="top">
Constructs a <code>front_insert_iterator</code> that inserts objects
   before the first element of <code>S</code>.
</td>
</tr>
<tr>
<td valign="top">
\code
template<class FrontInsertionSequence>
front_insert_iterator<FrontInsertionSequence>
front_inserter(FrontInsertionSequence& S);
\endcode
</td>
<td valign="top">
Equivalent to <code>front_insert_iterator&lt;FrontInsertionSequence&gt;(S)</code>. <A href="#4">[4]</A>
   This is a global function, not a member function.
</td>
</tr>
</table>
\section Notes Notes
<p><A name="1">[1]</A>
Note the difference between assignment through a
<code>FrontInsertionSequence ::iterator</code> and assignment through an
<code>front_insert_iterator&lt;\ref stldoc_FrontInsertionSequence&gt;</code>.  If <code>i</code> is a valid
<code>FrontInsertionSequence ::iterator</code>, then it points to some particular
element in the \ref stldoc_FrontInsertionSequence; the expression <code>*i = t</code> 
replaces that element with <code>t</code>, and does not change the total number
of elements in the sequence.  If <code>ii</code> is a valid
<code>front_insert_iterator&lt;\ref stldoc_FrontInsertionSequence&gt;</code>, however, then 
the expression <code>*ii = t</code> is equivalent, for some \ref stldoc_FrontInsertionSequence
<code>seq</code>, to the expression <code>seq.push_front(t)</code>.  That is, it does not overwrite
any of <code>seq</code>'s elements and it does change <code>seq</code>'s size.
<p><A name="2">[2]</A>
Note the difference between a <code>front_insert_iterator</code> and an
<code>\ref stldoc_insert_iterator</code>.  It may seem that a <code>front_insert_iterator</code> is
the same as an <code>\ref stldoc_insert_iterator</code> constructed with an insertion
point that is the beginning of a sequence.  In fact, though, there is
a very important difference : <b>every</b> assignment through a
<code>front_insert_iterator</code> corresponds to an insertion before the first
element of the sequence.  If you are inserting elements at the
beginning of a sequence using an <code>insert_iterator</code>, then the elements
will appear in the order in which they were inserted.  If, however,
you are inserting elements at the beginning of a sequence using a
<code>front_insert_iterator</code>, then the elements will appear in the reverse
of the order in which they were inserted.
<p><A name="3">[3]</A>
Note how assignment through an <code>front_insert_iterator</code> is implemented.
In general, unary <code>operator*</code> must be defined so that it returns a
proxy object, where the proxy object defines <code>operator=</code> to perform
the insert operation.  In this case, for the sake of simplicity, the
proxy object is the <code>front_insert_iterator</code> itself.  That is, <code>*i</code> simply
returns <code>i</code>, and <code>*i = t</code> is equivalent to <code>i = t</code>.  You should not,
however, rely on this behavior.  It is an implementation detail,
and it is not guaranteed to remain the same in future versions.
<p><A name="4">[4]</A>
This function exists solely for the sake of convenience:
since it is a non-member function, the template parameters may be
inferred and the type of the <code>front_insert_iterator</code> need not be declared
explicitly.  One easy way to reverse a range and insert it
at the beginning of a \ref stldoc_FrontInsertionSequence <code>S</code>, for example, is
<code>\ref stldoc_copy(first, last, front_inserter(S))</code>.
\section See_also See also
\ref stldoc_insert_iterator, \ref stldoc_back_insert_iterator, \ref stldoc_OutputIterator,
\ref stldoc_Sequence, \ref stldoc_FrontInsertionSequence, \ref stldoc_Iterators


*/
