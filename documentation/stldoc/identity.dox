/** \page stldoc_identity identity

<table cellpadding="0" cellspacing="0" width="100%" border="0">
<tr>
<td align="left">\image html functors.gif</td>
<td width="100%"></td>
<td align="right">\image html type.gif</td>
</tr>
<tr>
<td align="left" valign="top"><b>Category</b>: functors</td>
<td width="100%"></td>
<td align="right" valign="top"><b>Component type</b>: type</td>
</tr>
</table>

\section Description Description
<code>Identity</code> is a \ref stldoc_UnaryFunction that represents the identity
function: it takes a single argument <code>x</code>, and returns <code>x</code>.
\section Example Example
\code
int main()
{
  int x = 137;
  identity<int> id;
  assert(x == id(x));   
}           
\endcode
\section Definition Definition
Defined in the standard header <A href="functional">functional</A>, and in the nonstandard
backward-compatibility header <A href="function.h">function.h</A>.  This class is an SGI
extension; it is not part of the C++ standard.
\section Template_parameters Template parameters
<table border="1" cellpadding="3" cellspacing="3">
<tr>
<TH>
Parameter
</TH>
<TH>
Description
</TH>
<TH>
Default
</TH>
</tr>
<tr>
<td valign="top">
<code>T</code>
</td>
<td valign="top">
The function object's argument type, and return type. <A href="#1">[1]</A>
</td>
<td valign="top">
&nbsp;
</td>
</tr>
</table>
\section Model_of Model of
\ref stldoc_AdaptableUnaryFunction
\section Type_requirements Type requirements
None.
\section Public_base_classes Public base classes
<code>\ref stldoc_unary_function&lt;T, T&gt;</code>
\section Members Members
<table border="1" cellpadding="3" cellspacing="3">
<tr>
<TH>
Member
</TH>
<TH>
Where defined
</TH>
<TH>
Description
</TH>
</tr>
<tr>
<td valign="top">
<code>argument_type</code>
</td>
<td valign="top">
 \ref stldoc_AdaptableUnaryFunction
</td>
<td valign="top">
The type of <code>identity</code>'s argument: <code>T</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>result_type</code>
</td>
<td valign="top">
 \ref stldoc_AdaptableUnaryFunction
</td>
<td valign="top">
The type of the result: <code>T</code>. <A href="#1">[1]</A>
</td>
</tr>
<tr>
<td valign="top">
<code>const T&amp; operator()(const T&amp;) const</code>
</td>
<td valign="top">
 \ref stldoc_AdaptableUnaryFunction
</td>
<td valign="top">
Function call.  The return value is simply the argument.
</td>
</tr>
</table>
\section New_members New members
All of <code>identity</code>'s members are defined in the 
\ref stldoc_AdaptableUnaryFunction
requirements.  <code>Identity</code> does not introduce any new members.
\section Notes Notes
<p><A name="1">[1]</A>
It is essential that the return type and the argument type are
the same: generalizing <code>identity</code> to allow them to differ would not
work.  The reason is that <code>identity</code> returns a const reference to
its argument, rather than a copy of its argument.  If <code>identity</code> were
allowed to perform a conversion, then this would be a dangling reference.
\section See_also See also
The \ref stldoc_functors, 
<code>\ref stldoc_select1st</code>, <code>\ref stldoc_select2nd</code>, <code>\ref stldoc_project1st</code>, <code>\ref stldoc_project2nd</code>


*/
