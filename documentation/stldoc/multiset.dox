/** \page stldoc_multiset multiset

<table cellpadding="0" cellspacing="0" width="100%" border="0">
<tr>
<td align="left">\image html containers.gif</td>
<td width="100%"></td>
<td align="right">\image html type.gif</td>
</tr>
<tr>
<td align="left" valign="top"><b>Category</b>: containers</td>
<td width="100%"></td>
<td align="right" valign="top"><b>Component type</b>: type</td>
</tr>
</table>

\section Description Description
<code>Multiset</code> is a 
\ref stldoc_SortedAssociativeContainer
that stores objects of type <code>Key</code>.
<code>Multiset</code> is a
\ref stldoc_SimpleAssociativeContainer,
meaning that its value type, as well as its key type,
is <code>Key</code>.  It is also a
\ref stldoc_MultipleAssociativeContainer,
meaning that two or more elements may be identical.
<p>
<code>\ref stldoc_set</code> and <code>multiset</code>
are particularly well suited to the set algorithms
<code>\ref stldoc_includes</code>, 
<code>\ref stldoc_set_union</code>,
<code>\ref stldoc_set_intersection</code>,
<code>\ref stldoc_set_difference</code>, and
<code>\ref stldoc_set_symmetric_difference</code>.
The reason for this is twofold.  First, the set algorithms require
their arguments to be sorted ranges, and, since
<code>\ref stldoc_set</code> and <code>\ref stldoc_multiset</code> are
\ref stldoc_SortedAssociativeContainer,
their elements are always sorted in ascending order.
Second, the output range of these algorithms is always sorted, and
inserting a sorted range into a <code>set</code> or <code>multiset</code> is a
fast operation: the
\ref stldoc_UniqueSortedAssociativeContainer 
and \ref stldoc_MultipleSortedAssociativeContainer
requirements guarantee that inserting a
range takes only linear time if the range is already sorted.
<p>
<code>Multiset</code> has the important property that inserting a new element
into a <code>multiset</code> does not invalidate iterators that point to existing
elements.  Erasing an element from a multiset also does not invalidate
any iterators, except, of course, for iterators that actually point 
to the element that is being erased.
\section Example Example
\code
int main()
{
  const int N = 10;
  int a[N] = {4, 1, 1, 1, 1, 1, 0, 5, 1, 0};
  int b[N] = {4, 4, 2, 4, 2, 4, 0, 1, 5, 5};

  multiset<int> A(a, a + N);
  multiset<int> B(b, b + N);
  multiset<int> C;

  cout << "Set A: ";
  copy(A.begin(), A.end(), ostream_iterator<int>(cout, " "));
  cout << endl;
  cout << "Set B: ";
  copy(B.begin(), B.end(), ostream_iterator<int>(cout, " "));   
  cout << endl;

  cout << "Union: ";
  set_union(A.begin(), A.end(), B.begin(), B.end(),
            ostream_iterator<int>(cout, " "));
  cout << endl;

  cout << "Intersection: ";
  set_intersection(A.begin(), A.end(), B.begin(), B.end(),
                   ostream_iterator<int>(cout, " "));
  cout << endl;  

  set_difference(A.begin(), A.end(), B.begin(), B.end(),
                 insert_iterator(C, C.begin()));
  cout << "Set C (difference of A and B): ";
  copy(C.begin(), C.end(), ostream_iterator<int>(cout, " "));
  cout << endl;
}
\endcode
\section Definition Definition
Defined in the standard header <A href="set">set</A>, and in the nonstandard
backward-compatibility header <A href="multiset.h">multiset.h</A>.
\section Template_parameters Template parameters
<table border="1" cellpadding="3" cellspacing="3">
<tr>
<TH>
Parameter
</TH>
<TH>
Description
</TH>
<TH>
Default
</TH>
</tr>
<tr>
<td valign="top">
<code>Key</code>
</td>
<td valign="top">
The set's key type and value type.  This is also defined as <code>multiset::key_type</code>
   and <code>multiset::value_type</code>
</td>
<td valign="top">
&nbsp;
</td>
</tr>
<tr>
<td valign="top">
<code>Compare</code>
</td>
<td valign="top">
The key comparison function, a \ref stldoc_StrictWeakOrdering whose
   argument type is <code>key_type</code>; it returns <code>true</code> if its first 
   argument is less than its second argument, and <code>false</code> otherwise.
   This is also defined as <code>multiset::key_compare</code> and <code>multiset::value_compare</code>.
</td>
<td valign="top">
<code>\ref stldoc_less&lt;Key&gt;</code>
</td>
</tr>
<tr>
<td valign="top">
<code>Alloc</code>
</td>
<td valign="top">
The <code>multiset</code>'s allocator, used for all internal memory management.
</td>
<td valign="top">
<code>\ref stldoc_Allocators</code>
</td>
</tr>
</table>
\section Model_of Model of
\ref stldoc_MultipleSortedAssociativeContainer,
\ref stldoc_SimpleAssociativeContainer
\section Type_requirements Type requirements
<ul>
<li>
<code>Key</code> is \ref stldoc_Assignable.
<li>
<code>Compare</code> is a \ref stldoc_StrictWeakOrdering whose argument type
   is <code>Key</code>.
<li>
<code>Alloc</code> is an \ref stldoc_Allocators.
</ul>
\section Public_base_classes Public base classes
None.
\section Members Members
<table border="1" cellpadding="3" cellspacing="3">
<tr>
<TH>
Member
</TH>
<TH>
Where defined
</TH>
<TH>
Description
</TH>
</tr>
<tr>
<td valign="top">
<code>value_type</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
The type of object, <code>T</code>, stored in the multiset.
</td>
</tr>
<tr>
<td valign="top">
<code>key_type</code>
</td>
<td valign="top">
 \ref stldoc_AssociativeContainer
</td>
<td valign="top">
The key type associated with <code>value_type</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>key_compare</code>
</td>
<td valign="top">
 \ref stldoc_SortedAssociativeContainer
</td>
<td valign="top">
 \ref stldoc_functors that compares two keys for ordering.
</td>
</tr>
<tr>
<td valign="top">
<code>value_compare</code>
</td>
<td valign="top">
 \ref stldoc_SortedAssociativeContainer
</td>
<td valign="top">
 \ref stldoc_functors that compares two values for ordering.
</td>
</tr>
<tr>
<td valign="top">
<code>pointer</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
Pointer to <code>T</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>reference</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
Reference to <code>T</code>
</td>
</tr>
<tr>
<td valign="top">
<code>const_reference</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
Const reference to <code>T</code>
</td>
</tr>
<tr>
<td valign="top">
<code>size_type</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
An unsigned integral type.
</td>
</tr>
<tr>
<td valign="top">
<code>difference_type</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
A signed integral type.
</td>
</tr>
<tr>
<td valign="top">
<code>iterator</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
Iterator used to iterate through a <code>multiset</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>const_iterator</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
Const iterator used to iterate through a <code>multiset</code>.  (<code>Iterator</code> and
   <code>const_iterator</code> are the same type.)
</td>
</tr>
<tr>
<td valign="top">
<code>reverse_iterator</code>
</td>
<td valign="top">
 \ref stldoc_ReversibleContainer
</td>
<td valign="top">
Iterator used to iterate backwards through a <code>multiset</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>const_reverse_iterator</code>
</td>
<td valign="top">
 \ref stldoc_ReversibleContainer
</td>
<td valign="top">
Const iterator used to iterate backwards through a <code>multiset</code>.
  (<code>Reverse_iterator</code> and <code>const_reverse_iterator</code> are the same type.)
</td>
</tr>
<tr>
<td valign="top">
<code>iterator begin() const</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
Returns an <code>iterator</code> pointing to the beginning of the <code>multiset</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>iterator end() const</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
Returns an <code>iterator</code> pointing to the end of the <code>multiset</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>reverse_iterator rbegin() const</code>
</td>
<td valign="top">
 \ref stldoc_ReversibleContainer
</td>
<td valign="top">
Returns a <code>reverse_iterator</code> pointing to the beginning of the
   reversed multiset.
</td>
</tr>
<tr>
<td valign="top">
<code>reverse_iterator rend() const</code>
</td>
<td valign="top">
 \ref stldoc_ReversibleContainer
</td>
<td valign="top">
Returns a <code>reverse_iterator</code> pointing to the end of the
   reversed multiset.
</td>
</tr>
<tr>
<td valign="top">
<code>size_type size() const</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
Returns the size of the <code>multiset</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>size_type max_size() const</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
Returns the largest possible size of the <code>multiset</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>bool empty() const</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
<code>true</code> if the <code>multiset</code>'s size is <code>0</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>key_compare key_comp() const</code>
</td>
<td valign="top">
 \ref stldoc_SortedAssociativeContainer
</td>
<td valign="top">
Returns the <code>key_compare</code> object used by the <code>multiset</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>value_compare value_comp() const</code>
</td>
<td valign="top">
 \ref stldoc_SortedAssociativeContainer
</td>
<td valign="top">
Returns the <code>value_compare</code> object used by the <code>multiset</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>multiset()</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
Creates an empty <code>multiset</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>multiset(const key_compare&amp; comp)</code>
</td>
<td valign="top">
 \ref stldoc_SortedAssociativeContainer
</td>
<td valign="top">
Creates an empty <code>multiset</code>, using <code>comp</code> as the <code>key_compare</code> object.
</td>
</tr>
<tr>
<td valign="top">
\code
template <class InputIterator>
multiset(InputIterator f, InputIterator l)
\endcode
<A href="#1">[1]</A>
</td>
<td valign="top">
 \ref stldoc_MultipleSortedAssociativeContainer
</td>
<td valign="top">
Creates a multiset with a copy of a range.
</td>
</tr>
<tr>
<td valign="top">
\code
template <class InputIterator>
multiset(InputIterator f, InputIterator l,
         const key_compare& comp)
\endcode
<A href="#1">[1]</A>
</td>
<td valign="top">
 \ref stldoc_MultipleSortedAssociativeContainer
</td>
<td valign="top">
Creates a multiset with a copy of a range, using <code>comp</code> as the <code>key_compare</code>
   object.
</td>
</tr>
<tr>
<td valign="top">
<code>multiset(const multiset&amp;)</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
The copy constructor.
</td>
</tr>
<tr>
<td valign="top">
<code>multiset&amp; operator=(const multiset&amp;)</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
The assignment operator
</td>
</tr>
<tr>
<td valign="top">
<code>void swap(multiset&amp;)</code>
</td>
<td valign="top">
 \ref stldoc_Container
</td>
<td valign="top">
Swaps the contents of two multisets.
</td>
</tr>
<tr>
<td valign="top">
<code>iterator insert(const value_type&amp; x)</code>
</td>
<td valign="top">
 \ref stldoc_MultipleAssociativeContainer
</td>
<td valign="top">
Inserts <code>x</code> into the <code>multiset</code>.
</td>
</tr>
<tr>
<td valign="top">
\code
iterator insert(iterator pos, 
                const value_type& x)
\endcode
</td>
<td valign="top">
 \ref stldoc_MultipleSortedAssociativeContainer
</td>
<td valign="top">
Inserts <code>x</code> into the <code>multiset</code>, using <code>pos</code> as a hint to where it will be
   inserted.
</td>
</tr>
<tr>
<td valign="top">
\code
template <class InputIterator>
void insert(InputIterator, InputIterator)
\endcode
<A href="#1">[1]</A>
</td>
<td valign="top">
 \ref stldoc_MultipleSortedAssociativeContainer
</td>
<td valign="top">
Inserts a range into the <code>multiset</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>void erase(iterator pos)</code>
</td>
<td valign="top">
 \ref stldoc_AssociativeContainer
</td>
<td valign="top">
Erases the element pointed to by <code>pos</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>size_type erase(const key_type&amp; k)</code>
</td>
<td valign="top">
 \ref stldoc_AssociativeContainer
</td>
<td valign="top">
Erases the element whose key is <code>k</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>void erase(iterator first, iterator last)</code>
</td>
<td valign="top">
 \ref stldoc_AssociativeContainer
</td>
<td valign="top">
Erases all elements in a range.
</td>
</tr>
<tr>
<td valign="top">
<code>void clear()</code>
</td>
<td valign="top">
 \ref stldoc_AssociativeContainer
</td>
<td valign="top">
Erases all of the elements.
</td>
</tr>
<tr>
<td valign="top">
<code>iterator find(const key_type&amp; k) const</code>
</td>
<td valign="top">
 \ref stldoc_AssociativeContainer
</td>
<td valign="top">
Finds an element whose key is <code>k</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>size_type count(const key_type&amp; k) const</code>
</td>
<td valign="top">
 \ref stldoc_AssociativeContainer
</td>
<td valign="top">
Counts the number of elements whose key is <code>k</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>iterator lower_bound(const key_type&amp; k) const</code>
</td>
<td valign="top">
 \ref stldoc_SortedAssociativeContainer
</td>
<td valign="top">
Finds the first element whose key is not less than <code>k</code>.
</td>
</tr>
<tr>
<td valign="top">
<code>iterator upper_bound(const key_type&amp; k) const</code>
</td>
<td valign="top">
 \ref stldoc_SortedAssociativeContainer
</td>
<td valign="top">
Finds the first element whose key greater than <code>k</code>.
</td>
</tr>
<tr>
<td valign="top">
\code
pair<iterator, iterator> 
equal_range(const key_type& k) const
\endcode
</td>
<td valign="top">
 \ref stldoc_SortedAssociativeContainer
</td>
<td valign="top">
Finds a range containing all elements whose key is <code>k</code>.
</td>
</tr>
<tr>
<td valign="top">
\code
bool operator==(const multiset&, 
                const multiset&)
\endcode
</td>
<td valign="top">
 \ref stldoc_ForwardContainer
</td>
<td valign="top">
Tests two multisets for equality.  This is a global function, not
   a member function.
</td>
</tr>
<tr>
<td valign="top">
\code
bool operator<(const multiset&, 
               const multiset&)
\endcode
</td>
<td valign="top">
 \ref stldoc_ForwardContainer
</td>
<td valign="top">
Lexicographical comparison.  This is a global function, not
   a member function.
</td>
</tr>
</table>
\section New_members New members
All of <code>multiset</code>'s members are defined in the 
\ref stldoc_MultipleSortedAssociativeContainer and 
\ref stldoc_SimpleAssociativeContainer
requirements.
<code>Multiset</code> does not introduce any new members.
\section Notes Notes
<p><A name="1">[1]</A>
This member function relies on <i>member template</i> functions, which
at present (early 1998) are not supported by all compilers.  If your
compiler supports member templates, you can call this function with
any type of \ref stldoc_InputIterator.  If your
compiler does not yet support member templates, though, then the
arguments must either be of type <code>const value_type*</code> or of type
<code>multiset::const_iterator</code>.
\section See_also See also
\ref stldoc_AssociativeContainer, 
\ref stldoc_SortedAssociativeContainer, 
\ref stldoc_SimpleAssociativeContainer, 
\ref stldoc_MultipleSortedAssociativeContainer, 
<code>\ref stldoc_set</code>, 
<code>\ref stldoc_Map</code>,
<code>\ref stldoc_Multimap</code>,
<code>\ref stldoc_hash_set</code>, 
<code>\ref stldoc_hash_map</code>, 
<code>\ref stldoc_hash_multiset</code>, 
<code>\ref stldoc_hash_multimap</code>


*/
