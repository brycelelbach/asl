/** \page stldoc_is_heap is_heap

<table cellpadding="0" cellspacing="0" width="100%" border="0">
<tr>
<td align="left">\image html algorithms.gif</td>
<td width="100%"></td>
<td align="right">\image html function.gif</td>
</tr>
<tr>
<td align="left" valign="top"><b>Category</b>: algorithms</td>
<td width="100%"></td>
<td align="right" valign="top"><b>Component type</b>: function</td>
</tr>
</table>

\section Prototype Prototype
<code>Is_heap</code> is an overloaded name; there are actually two is_heap functions.
\code
template <class RandomAccessIterator>
bool is_heap(RandomAccessIterator first, RandomAccessIterator last);

template <class RandomAccessIterator, class StrictWeakOrdering>
inline bool is_heap(RandomAccessIterator first, RandomAccessIterator last,
                    StrictWeakOrdering comp)
\endcode
\section Description Description
<code>Is_heap</code> returns <code>true</code> if the range <code>[first, last)</code> is a heap <A href="#1">[1]</A>,
and <code>false</code> otherwise.  The two versions differ in how they define
whether one element is less than another:  the first version 
compares objects using <code>operator&lt;</code>, and the second compares objects
using a \ref stldoc_functors <code>comp</code>.
\section Definition Definition
Defined in the standard header <A href="algorithm">algorithm</A>, and in the nonstandard
backward-compatibility header <A href="algo.h">algo.h</A>.  This function is an SGI
extension; it is not part of the C++ standard.
\section Requirements_on_types Requirements on types
For the first version:
<ul>
<li>
<code>RandomAccessIterator</code> is a model of \ref stldoc_RandomAccessIterator.
<li>
<code>RandomAccessIterator</code>'s value type is a model of \ref stldoc_LessThanComparable.
<li>
The ordering on objects of <code>RandomAccessIterator</code>'s value type is a <i>strict
   weak ordering</i>, as defined in the \ref stldoc_LessThanComparable requirements.
</ul>
For the second version:
<ul>
<li>
<code>RandomAccessIterator</code> is a model of \ref stldoc_RandomAccessIterator.
<li>
<code>StrictWeakOrdering</code> is a model of \ref stldoc_StrictWeakOrdering.
<li>
<code>RandomAccessIterator</code>'s value type is convertible to
   <code>StrictWeakOrdering</code>'s argument type.
</ul>
\section Preconditions Preconditions
<ul>
<li>
<code>[first, last)</code> is a valid range.
</ul>
\section Complexity Complexity
Linear.  Zero comparisons if <code>[first, last)</code> is an empty range, otherwise
at most <code>(last - first) - 1</code> comparisons.
\section Example Example
\code
int A[] = {1, 2, 3, 4, 5, 6, 7};
const int N = sizeof(A) / sizeof(int);

assert(!is_heap(A, A+N));
make_heap(A, A+N);
assert(is_heap(A, A+N));
\endcode
\section Notes Notes
<p><A name="1">[1]</A>
A heap is a particular way of ordering the elements in a range of
\ref stldoc_RandomAccessIterator <code>[f, l)</code>.  The reason heaps are useful
(especially for sorting, or as priority queues) is that they satisfy
two important properties.  First, <code>*f</code> is the largest element in the
heap.  Second, it is possible to add an element to a heap (using
<code>\ref stldoc_push_heap</code>), or to remove <code>*f</code>, in logarithmic time.
Internally, a heap is a tree represented as a sequential range.
The tree is constructed so that that each
node is less than or equal to its parent node.
\section See_also See also
<code>\ref stldoc_make_heap</code>, <code>\ref stldoc_push_heap</code>, <code>\ref stldoc_pop_heap</code>, <code>\ref stldoc_sort_heap</code>


*/
