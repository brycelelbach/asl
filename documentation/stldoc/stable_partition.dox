/** \page stldoc_stable_partition stable_partition

<table cellpadding="0" cellspacing="0" width="100%" border="0">
<tr>
<td align="left">\image html algorithms.gif</td>
<td width="100%"></td>
<td align="right">\image html function.gif</td>
</tr>
<tr>
<td align="left" valign="top"><b>Category</b>: algorithms</td>
<td width="100%"></td>
<td align="right" valign="top"><b>Component type</b>: function</td>
</tr>
</table>

\section Prototype Prototype
\code
template <class ForwardIterator, class Predicate>
ForwardIterator stable_partition(ForwardIterator first, ForwardIterator last, 
                                 Predicate pred);
\endcode
\section Description Description
<code>Stable_partition</code> is much like <code>\ref stldoc_partition</code>: it 
reorders the elements in the range <code>[first, last)</code> based
on the \ref stldoc_functors <code>pred</code>, such that all
of the elements that satisfy <code>pred</code> appear before all of the elements
that fail to satisfy it.  
The postcondition is that, for some
iterator <code>middle</code> in the range <code>[first, last)</code>, 
<code>pred(*i)</code> is <code>true</code> for every iterator <code>i</code> in the range <code>[first, middle)</code> and
<code>false</code> for every iterator <code>i</code> in the range <code>[middle, last)</code>.
The return value of <code>stable_partition</code> is <code>middle</code>.
<p>
<code>Stable_partition</code> differs from <code>\ref stldoc_partition</code> in that
<code>stable_partition</code> is guaranteed to preserve relative order.  That is,
if <code>x</code> and <code>y</code> are elements in <code>[first, last)</code> such that <code>pred(x) == pred(y)</code>,
and if <code>x</code> precedes <code>y</code>, then it will still be true after <code>stable_partition</code>
is true that <code>x</code> precedes <code>y</code>. <A href="#1">[1]</A>
\section Definition Definition
Defined in the standard header <A href="algorithm">algorithm</A>, and in the nonstandard
backward-compatibility header <A href="algo.h">algo.h</A>.
\section Requirements_on_types Requirements on types
<ul>
<li>
<code>ForwardIterator</code> is a model of \ref stldoc_ForwardIterator
<li>
<code>Predicate</code> is a model of \ref stldoc_Predicate
<li>
<code>ForwardIterator</code>'s value type is convertible to <code>Predicate</code>'s
   argument type.
</ul>
\section Preconditions Preconditions
<ul>
<li>
<code>[first, last)</code> is a valid range.
</ul>
\section Complexity Complexity
<code>Stable_partition</code> 
is an <i>adaptive</i> algorithm: it attempts to
allocate a temporary memory buffer, and its run-time complexity depends
on how much memory is available.  
Worst-case behavior (if no auxiliary memory is available) is 
at most <code>N*log(N)</code> swaps, where <code>N</code> is <code>last - first</code>, 
and best case (if a large enough auxiliary memory buffer is available) is 
linear in <code>N</code>.  In either case, <code>pred</code> is applied exactly <code>N</code> times.
\section Example Example
Reorder a sequence so that even numbers precede odd numbers.
\code
int A[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
const int N = sizeof(A)/sizeof(int);
stable_partition(A, A + N,
                 compose1(bind2nd(equal_to<int>(), 0),
                          bind2nd(modulus<int>(), 2)));
copy(A, A + N, ostream_iterator<int>(cout, " "));
// The output is "2 4 6 8 10 1 3 5 7 9".
\endcode
<A href="#1">[1]</A>
\section Notes Notes
<p><A name="1">[1]</A>
Note that the complexity of <code>stable_partition</code> is greater than
that of <code>\ref stldoc_partition</code>: the guarantee that relative order will be preserved
has a significant runtime cost.  If this guarantee isn't important to
you, you should use <code>\ref stldoc_partition</code>.
\section See_also See also
<code>\ref stldoc_partition</code>, \ref stldoc_Predicate, \ref stldoc_functors


*/
