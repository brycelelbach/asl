/** \page stldoc_lexicographical_compare_3way lexicographical_compare_3way

<table cellpadding="0" cellspacing="0" width="100%" border="0">
<tr>
<td align="left">\image html algorithms.gif</td>
<td width="100%"></td>
<td align="right">\image html function.gif</td>
</tr>
<tr>
<td align="left" valign="top"><b>Category</b>: algorithms</td>
<td width="100%"></td>
<td align="right" valign="top"><b>Component type</b>: function</td>
</tr>
</table>

\section Prototype Prototype
\code
template <class InputIterator1, class InputIterator2>
int lexicographical_compare_3way(InputIterator1 first1, InputIterator1 last1,
                                 InputIterator2 first2, InputIterator2 last2);
\endcode
\section Description Description
<code>Lexicographical_compare_3way</code> is essentially a generalization of the
function <code>strcmp</code> from the standard C library: it returns a negative
number if the range <code>[first1, last1)</code> is lexicographically less than
the range <code>[first2, last2)</code>, a positive number if <code>[first2, last2)</code> is
lexicographically less than <code>[first1, last1)</code>, and zero if neither
range is lexicographically less than the other. <A href="#1">[1]</A>
<p>
As with <code>\ref stldoc_lexicographical_compare</code>, lexicographical comparison
means &quot;dictionary&quot; (element-by-element) ordering.  That is,
<code>lexicographical_compare_3way</code> returns a negative number if
<code>*first1</code> is less than <code>*first2</code>, and a positive number if <code>*first1</code>
is greater than <code>*first2</code>.  If the two first elements are equivalent <A href="#2">[2]</A>
then <code>lexicographical_compare_3way</code> compares the two second elements,
and so on.  <code>Lexicographical_compare_3way</code> returns <code>0</code> only if the two ranges
<code>[first1, last1)</code> and <code>[first2, last2)</code> have the same length and if
every element in the first range is equivalent to its corresponding
element in the second.
\section Definition Definition
Defined in the standard header <A href="algorithm">algorithm</A>, and in the nonstandard
backward-compatibility header <A href="algo.h">algo.h</A>.  This function is an SGI
extension; it is not part of the C++ standard.
\section Requirements_on_types Requirements on types
<ul>
<li>
<code>InputIterator1</code> is a model of \ref stldoc_InputIterator.
<li>
<code>InputIterator2</code> is a model of \ref stldoc_InputIterator.
<li>
<code>InputIterator1</code>'s value type is a model of \ref stldoc_LessThanComparable.
<li>
<code>InputIterator2</code>'s value type is a model of \ref stldoc_LessThanComparable.
<li>
If <code>v1</code> is an object of <code>InputIterator1</code>'s value type and <code>v2</code>
   is an object of <code>InputIterator2</code>'s value type, then both <code>v1 &lt; v2</code>
   and <code>v2 &lt; v1</code> are defined.
<li>
<code>Operator&lt;</code> is a <i>strict weak ordering</i>, as defined in the
   \ref stldoc_LessThanComparable requirements.
</ul>
\section Preconditions Preconditions
<ul>
<li>
<code>[first1, last1)</code> is a valid range.
<li>
<code>[first2, last2)</code> is a valid range.
</ul>
\section Complexity Complexity
Linear.  At most <code>2 * min(last1 - first1, last2 - first2)</code> comparisons.
\section Example Example
\code
int main()
{
  int A1[] = {3, 1, 4, 2, 8, 5, 7};
  int A2[] = {3, 1, 4, 1, 5, 9, 3};
  int A3[] = {1, 2, 3, 4};
  int A4[] = {1, 2, 3, 4, 5};

  const int N1 = sizeof(A1) / sizeof(int);
  const int N2 = sizeof(A2) / sizeof(int);
  const int N3 = sizeof(A3) / sizeof(int);
  const int N4 = sizeof(A4) / sizeof(int);

  int C12 = lexicographical_compare_3way(A1, A1 + N1, A2, A2 + N2);
  int C34 = lexicographical_compare_3way(A3, A3 + N3, A4, A4 + N4);

  cout << "A1[] and A2[]: " << C12 << endl;
  cout << "A3[] and A4[]: " << C34 << endl;
}
\endcode
\section Notes Notes
<p><A name="1">[1]</A>
<code>Lexicographical_compare_3way</code> is almost, but not quite, redundant:
the call <code>lexicographical_compare_3way(f1,l1, f2,l2)</code> could be written
as <code>\ref stldoc_lexicographical_compare\zwj(f1,l1, f2,l2) ? -1 :
(\ref stldoc_lexicographical_compare\zwj(f2,l2, f1,l1) ? 1 : 0)</code>.  The single call to 
<code>lexicographical_compare_3way</code>, however, is much faster than the two
calls to <code>\ref stldoc_lexicographical_compare</code>.
<p><A name="2">[2]</A>
&quot;Equivalent&quot;, not &quot;equal&quot;, because two equivalent elements
(that is, two elements with the property that neither one is
less than the other) are not necessarily equal.  <code>Operator&lt;</code>
is required to induce a <i>strict weak ordering</i>, not necessarily
a <i>total ordering</i>.  See the \ref stldoc_LessThanComparable requirements
for a discussion.
\section See_also See also
<code>\ref stldoc_lexicographical_compare</code>,
<code>\ref stldoc_equal</code>, <code>\ref stldoc_mismatch</code>, 
<code>\ref stldoc_search</code>,
\ref stldoc_LessThanComparable, 
\ref stldoc_StrictWeakOrdering, 
<code>\ref stldoc_sort</code>


*/
