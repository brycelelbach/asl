/** \page stldoc_binary_negate binary_negate

<table cellpadding="0" cellspacing="0" width="100%" border="0">
<tr>
<td align="left">\image html functors.gif</td>
<td align="right">\image html type.gif</td>
</tr>
<tr>
<td align="left">\image html adaptors.gif</td>
<td align="right"></td>
</tr>
<tr>
<td align="left" valign="top"><b>Categories</b>: functors, adaptors</td>
<td align="right" valign="top"><b>Component type</b>: type</td>
</tr>
</table>

\section Description Description
<code>Binary_negate</code> is a \ref stldoc_functors adaptor: it is an
\ref stldoc_AdaptableBinaryPredicate that represents the logical negation
of some other \ref stldoc_AdaptableBinaryPredicate.  That is: if <code>f</code> is an
object of class <code>binary_negate&lt;AdaptableBinaryPredicate&gt;</code>, then
there exists an object <code>pred</code> of class <code>AdaptableBinaryPredicate</code>
such that <code>f(x,y)</code> always returns the same value as <code>!pred(x,y)</code>. 
There is rarely any reason to construct a <code>binary_negate</code>
directly; it is almost always easier to use the helper function <code>not2</code>.
\section Example Example
Finds the first character in a string that is neither
<code>' '</code> nor <code>'\n'</code>.
\code
char str[MAXLEN];
...
const char* wptr = find_if(str, str + MAXLEN,
                           compose2(not2(logical_or<bool>()),
                                    bind2nd(equal_to<char>(), ' '),
                                    bind2nd(equal_to<char>(), '\n')));
assert(wptr == str + MAXLEN || !(*wptr == ' ' || *wptr == '\n')); 
\endcode
\section Definition Definition
Defined in the standard header <A href="functional">functional</A>, and in the nonstandard
backward-compatibility header <A href="function.h">function.h</A>.
\section Template_parameters Template parameters
<table border="1" cellpadding="3" cellspacing="3">
<tr>
<TH>
Parameter
</TH>
<TH>
Description
</TH>
<TH>
Default
</TH>
</tr>
<tr>
<td valign="top">
<code>AdaptableBinaryPredicate</code>
</td>
<td valign="top">
The type of the function object that this <code>binary_negate</code> is the logical
   negation of.
</td>
<td valign="top">
&nbsp;
</td>
</tr>
</table>
\section Model_of Model of
\ref stldoc_AdaptableBinaryPredicate
\section Type_requirements Type requirements
<code>AdaptableBinaryPredicate</code> must be a model of \ref stldoc_AdaptableBinaryPredicate.
\section Public_base_classes Public base classes
\code
binary_function<AdaptableBinaryPredicate::first_argument_type,
                AdaptableBinaryPredicate::second_argument_type,
                bool>
\endcode
\section Members Members
<table border="1" cellpadding="3" cellspacing="3">
<tr>
<TH>
Member
</TH>
<TH>
Where defined
</TH>
<TH>
Description
</TH>
</tr>
<tr>
<td valign="top">
<code>first_argument_type</code>
</td>
<td valign="top">
 \ref stldoc_AdaptableBinaryFunction
</td>
<td valign="top">
The type of the first argument: <code>AdaptableBinaryPredicate::first_argument_type</code>
</td>
</tr>
<tr>
<td valign="top">
<code>second_argument_type</code>
</td>
<td valign="top">
 \ref stldoc_AdaptableBinaryFunction
</td>
<td valign="top">
The type of the second argument: <code>AdaptableBinaryPredicate::second_argument_type</code>
</td>
</tr>
<tr>
<td valign="top">
<code>result_type</code>
</td>
<td valign="top">
 \ref stldoc_AdaptableBinaryFunction
</td>
<td valign="top">
The type of the result: <code>bool</code>
</td>
</tr>
<tr>
<td valign="top">
\code
binary_negate(const AdaptableBinaryPredicate& pred)
\endcode
</td>
<td valign="top">
<code>binary_negate</code>
</td>
<td valign="top">
See below.
</td>
</tr>
<tr>
<td valign="top">
\code
template <class AdaptableBinaryPredicate>
binary_negate<AdaptableBinaryPredicate>
not2(const AdaptableBinaryPredicate& pred);
\endcode
</td>
<td valign="top">
<code>binary_negate</code>
</td>
<td valign="top">
See below.
</td>
</tr>
</table>
\section New_members New members
These members are not defined in the 
\ref stldoc_AdaptableBinaryPredicate
requirements, but are specific to 
<code>binary_negate</code>.
<table border="1" cellpadding="3" cellspacing="3">
<tr>
<TH>
Member
</TH>
<TH>
Description
</TH>
</tr>
<tr>
<td valign="top">
\code
binary_negate(const AdaptableBinaryPredicate& pred)
\endcode
</td>
<td valign="top">
The constructor.  Creates a <code>binary_negate&lt;AdaptableBinaryPredicate&gt;</code>
whose underlying predicate is <code>pred</code>.  
</td>
</tr>
<tr>
<td valign="top">
\code
template <class AdaptableBinaryPredicate>
binary_negate<AdaptableBinaryPredicate>
not2(const AdaptableBinaryPredicate& pred);
\endcode
</td>
<td valign="top">
If <code>p</code> is of type <code>AdaptableBinaryPredicate</code> then
<code>not2(p)</code> is equivalent to <code>binary_negate<AdaptableBinaryPredicate>(p)</code>,
but more convenient.  This is a global function, not a member function.
</td>
</tr>
</table>
\section Notes Notes
\section See_also See also
The \ref stldoc_functors, \ref stldoc_AdaptablePredicate, \ref stldoc_Predicate, 
<code>\ref stldoc_unary_negate</code>, <code>\ref stldoc_unary_compose</code>, <code>\ref stldoc_binary_compose</code>


*/
