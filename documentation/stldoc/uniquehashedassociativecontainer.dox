/** \page stldoc_UniqueHashedAssociativeContainer UniqueHashedAssociativeContainer

<table cellpadding="0" cellspacing="0" width="100%" border="0">
<tr>
<td align="left">\image html containers.gif</td>
<td width="100%"></td>
<td align="right">\image html concept.gif</td>
</tr>
<tr>
<td align="left" valign="top"><b>Category</b>: containers</td>
<td width="100%"></td>
<td align="right" valign="top"><b>Component type</b>: concept</td>
</tr>
</table>

\section Description Description
A Unique Hashed Associative Container is a <A href="HashedAssociativeContainer.html">Hashed Associative
Container</A> that is also a \ref stldoc_UniqueAssociativeContainer.  That is,
it is a \ref stldoc_HashedAssociativeContainer with the property that no two
elements in the container have the same key.
\section Refinement_of Refinement of
\ref stldoc_HashedAssociativeContainer, \ref stldoc_UniqueAssociativeContainer
\section Associated_types Associated types
None, except for those described in the \ref stldoc_HashedAssociativeContainer
and \ref stldoc_UniqueAssociativeContainer requirements.
\section Notation Notation
<table>
<tr>
<td valign="top">
<code>X</code>
</td>
<td valign="top">
A type that is a model of Hashed Associative Container
</td>
</tr>
<tr>
<td valign="top">
<code>a</code>
</td>
<td valign="top">
Object of type <code>X</code>
</td>
</tr>
<tr>
<td valign="top">
<code>t</code>
</td>
<td valign="top">
Object of type <code>X::value_type</code>
</td>
</tr>
<tr>
<td valign="top">
<code>k</code>
</td>
<td valign="top">
Object of type <code>X::key_type</code>
</td>
</tr>
<tr>
<td valign="top">
<code>p</code>, <code>q</code>
</td>
<td valign="top">
Object of type <code>X::iterator</code>
</td>
</tr>
<tr>
<td valign="top">
<code>n</code>
</td>
<td valign="top">
Object of type <code>X::size_type</code>
</td>
</tr>
<tr>
<td valign="top">
<code>h</code>
</td>
<td valign="top">
Object of type <code>X::hasher</code>
</td>
</tr>
<tr>
<td valign="top">
<code>c</code>
</td>
<td valign="top">
Object of type <code>X::key_equal</code>
</td>
</tr>
</table>
\section Definitions Definitions
\section Valid_expressions Valid expressions
In addition to the expressions defined in \ref stldoc_HashedAssociativeContainer
and \ref stldoc_UniqueAssociativeContainer, the following expressions must be valid.
<table border="1" cellpadding="3" cellspacing="3">
<tr>
<TH>
Name
</TH>
<TH>
Expression
</TH>
<TH>
Type requirements
</TH>
<TH>
Return type
</TH>
</tr>
<tr>
<td valign="top">
Range constructor
</td>
<td valign="top">
\code
X(i, j)
X a(i, j);
\endcode
</td>
<td valign="top">
<code>i</code> and <code>j</code> are \ref stldoc_InputIterator whose value type is convertible
   to <code>T</code> <A href="#1">[1]</A>.
</td>
<td valign="top">
<code>X</code>
</td>
</tr>
<tr>
<td valign="top">
Range constructor with bucket count
</td>
<td valign="top">
\code
X(i, j, n)
X a(i, j, n);
\endcode
</td>
<td valign="top">
<code>i</code> and <code>j</code> are \ref stldoc_InputIterator whose value type is convertible
   to <code>T</code> <A href="#1">[1]</A>.
</td>
<td valign="top">
<code>X</code>
</td>
</tr>
<tr>
<td valign="top">
Range constructor with hash function
</td>
<td valign="top">
\code
X(i, j, n, h)
X a(i, j, n, h);
\endcode
</td>
<td valign="top">
<code>i</code> and <code>j</code> are \ref stldoc_InputIterator whose value type is convertible
   to <code>T</code> <A href="#1">[1]</A>.
</td>
<td valign="top">
<code>X</code>
</td>
</tr>
<tr>
<td valign="top">
Range constructor with key equal
</td>
<td valign="top">
\code
X(i, j, n, h, k)
X a(i, j, n, h, k);
\endcode
</td>
<td valign="top">
<code>i</code> and <code>j</code> are \ref stldoc_InputIterator whose value type is convertible
   to <code>T</code> <A href="#1">[1]</A>.
</td>
<td valign="top">
<code>X</code>
</td>
</tr>
</table>
\section Expression_semantics Expression semantics
<table border="1" cellpadding="3" cellspacing="3">
<tr>
<TH>
Name
</TH>
<TH>
Expression
</TH>
<TH>
Precondition
</TH>
<TH>
Semantics
</TH>
<TH>
Postcondition
</TH>
</tr>
<tr>
<td valign="top">
Range constructor
</td>
<td valign="top">
\code
X(i, j)
X a(i, j);
\endcode
</td>
<td valign="top">
<code>[i,j)</code> is a valid range.
</td>
<td valign="top">
Creates an associative container that contains all of the elements in the range <code>[i,j)</code>
   that have unique keys, using <code>hasher()</code> as the hash function 
   and <code>key_equal()</code> as the key equality function.
</td>
<td valign="top">
<code>size()</code> is less than or equal to the distance from <code>i</code> to <code>j</code>.
   The bucket count is an unspecified default value.  The hash 
   function is <code>hasher()</code>, and the key equality function is <code>key_equal()</code>.
</td>
</tr>
<tr>
<td valign="top">
Range constructor with bucket count
</td>
<td valign="top">
\code
X(i, j, n)
X a(i, j, n);
\endcode
</td>
<td valign="top">
<code>[i,j)</code> is a valid range.
</td>
<td valign="top">
Creates an associative container that contains all of the elements
 in the range <code>[i,j)</code> that have unique keys, using at least <code>n</code>
 buckets, and using <code>hasher()</code> as the hash function and <code>key_equal()</code>
 as the key equality function.
</td>
<td valign="top">
<code>size()</code> is less than or equal to the distance from <code>i</code> to <code>j</code>.
   The bucket count is greater than or equal to <code>n</code>.  The hash 
   function is <code>hasher()</code>, and the key equality function is <code>key_equal()</code>.
</td>
</tr>
<tr>
<td valign="top">
Range constructor with hash function
</td>
<td valign="top">
\code
X(i, j, n, h)
X a(i, j, n, h);
\endcode
</td>
<td valign="top">
<code>[i,j)</code> is a valid range.
</td>
<td valign="top">
Creates an associative container that contains all of the elements
 in the range <code>[i,j)</code> that have unique keys, using at least <code>n</code>
 buckets, and using <code>h</code> as the hash function and <code>key_equal()</code>
 as the key equality function.
</td>
<td valign="top">
<code>size()</code> is less than or equal to the distance from <code>i</code> to <code>j</code>.
   The bucket count is greater than or equal to <code>n</code>.  The hash 
   function is <code>h</code>, and the key equality function is <code>key_equal()</code>.
</td>
</tr>
<tr>
<td valign="top">
Range constructor with key equal
</td>
<td valign="top">
\code
X(i, j, n, h, k)
X a(i, j, n, h, k);
\endcode
</td>
<td valign="top">
<code>[i,j)</code> is a valid range.
</td>
<td valign="top">
Creates an associative container that contains all of the elements
 in the range <code>[i,j)</code> that have unique keys, using at least <code>n</code>
 buckets, and using <code>h</code> as the hash function and <code>k</code>
 as the key equality function.
</td>
<td valign="top">
<code>size()</code> is less than or equal to the distance from <code>i</code> to <code>j</code>.
   The bucket count is greater than or equal to <code>n</code>.  The hash 
   function is <code>h</code>, and the key equality function is <code>k</code>.
</td>
</tr>
</table>
\section Complexity_guarantees Complexity guarantees
The range constructor, range constructor with bucket count,
range constructor with hash function, and 
range constructor with key equal, are all linear in <code>j - i</code>.
\section Invariants Invariants
\section Models Models
<ul>
<li>
<code>\ref stldoc_hash_set</code>
<li>
<code>\ref stldoc_hash_map</code>
</ul>
\section Notes Notes
<p><A name="1">[1]</A>
At present (early 1998), not all compilers support
&quot;member templates&quot;.  If your compiler supports member
templates then <code>i</code> and <code>j</code> may be of any type that
conforms to the \ref stldoc_InputIterator
requirements.  If your compiler does not yet support member
templates, however, then <code>i</code> and <code>j</code> must be of type
<code>const T*</code> or of type <code>X::const_iterator</code>.
\section See_also See also
\ref stldoc_AssociativeContainer, \ref stldoc_HashedAssociativeContainer,
\ref stldoc_MultipleHashedAssociativeContainer
\ref stldoc_SortedAssociativeContainer


*/
