/** \page stldoc_sort sort

<table cellpadding="0" cellspacing="0" width="100%" border="0">
<tr>
<td align="left">\image html algorithms.gif</td>
<td width="100%"></td>
<td align="right">\image html function.gif</td>
</tr>
<tr>
<td align="left" valign="top"><b>Category</b>: algorithms</td>
<td width="100%"></td>
<td align="right" valign="top"><b>Component type</b>: function</td>
</tr>
</table>

\section Prototype Prototype
<code>Sort</code> is an overloaded name; there are actually two <code>sort</code>
functions.
\code
template <class RandomAccessIterator>
void sort(RandomAccessIterator first, RandomAccessIterator last);

template <class RandomAccessIterator, class StrictWeakOrdering>
void sort(RandomAccessIterator first, RandomAccessIterator last,
          StrictWeakOrdering comp);
\endcode
\section Description Description
<code>Sort</code> sorts the elements in <code>[first, last)</code> into ascending order,
meaning that if <code>i</code> and <code>j</code> are any two valid iterators in <code>[first, last)</code>
such that <code>i</code> precedes <code>j</code>, then <code>*j</code> is not less than <code>*i</code>.  Note:
<code>sort</code> is not guaranteed to be stable.  That is, suppose that <code>*i</code>
and <code>*j</code> are equivalent: neither one is less than the other.  It is
not guaranteed that the relative order of these two elements will be
preserved by <code>sort</code>. <A href="#1">[1]</A>
<p>
The two versions of <code>sort</code> differ in how they define whether one
element is less than another.  The first version compares
objects using <code>operator&lt;</code>, and the second compares objects using
a \ref stldoc_functors <code>comp</code>.
\section Definition Definition
Defined in the standard header <A href="algorithm">algorithm</A>, and in the nonstandard
backward-compatibility header <A href="algo.h">algo.h</A>.
\section Requirements_on_types Requirements on types
For the first version, the one that takes two arguments:
<ul>
<li>
<code>RandomAccessIterator</code> is a model of \ref stldoc_RandomAccessIterator.
<li>
<code>RandomAccessIterator</code> is mutable.
<li>
<code>RandomAccessIterator</code>'s value type is \ref stldoc_LessThanComparable.
<li>
The ordering relation on <code>RandomAccessIterator</code>'s value type is
 a <i>strict weak ordering</i>, as defined in the \ref stldoc_LessThanComparable
 requirements.
</ul>
For the second version, the one that takes three arguments:
<ul>
<li>
<code>RandomAccessIterator</code> is a model of \ref stldoc_RandomAccessIterator.
<li>
<code>RandomAccessIterator</code> is mutable.
<li>
<code>StrictWeakOrdering</code> is a model of \ref stldoc_StrictWeakOrdering.
<li>
<code>RandomAccessIterator</code>'s value type is convertible to
   <code>StrictWeakOrdering</code>'s argument type.
</ul>
\section Preconditions Preconditions
<ul>
<li>
<code>[first, last)</code> is a valid range.
</ul>
\section Complexity Complexity
<code>O(N log(N))</code> comparisons (both average and worst-case), 
where <code>N</code> is <code>last - first</code>. <A href="#2">[2]</A>
\section Example Example
\code
int A[] = {1, 4, 2, 8, 5, 7};
const int N = sizeof(A) / sizeof(int);
sort(A, A + N);
copy(A, A + N, ostream_iterator<int>(cout, " "));
// The output is " 1 2 4 5 7 8".
\endcode
\section Notes Notes
<p><A name="1">[1]</A>
Stable sorting is sometimes important if you are sorting records
that have multiple fields: you might, for example, want to sort a list
of people by first name and then by last name.  The algorithm 
<code>\ref stldoc_stable_sort</code> does guarantee to preserve the relative ordering
of equivalent elements.
<p><A name="2">[2]</A>
Earlier versions of <code>sort</code> used the <i>quicksort</i> algorithm (C. A. R. Hoare,
<i>Comp. J.</i> <b>5</b>, 1962), using a pivot chosen by median of 
three (R. C. Singleton, <i>CACM</i> <b>12</b>, 1969).  Quicksort has
<code>O(N log(N))</code> average complexity, but quadratic worst-case
complexity.  See section 5.2.2 of Knuth for a discussion. 
(D. E. Knuth, <i>The Art of Computer Programming.  Volume 3: Sorting 
and Searching</i>. Addison-Wesley, 1975.)  The current implementation
of <code>sort</code>, however, uses the <i>introsort</i> algorithm (D. R.
Musser, &quot;Introspective Sorting and Selection Algorithms&quot;, 
<i>Software Practice and Experience</i> <b>27</b>(8):983, 1997.)
whose worst case complexity is <code>O(N log(N))</code>.
Introsort is very similar to median-of-three quicksort, and is at
least as fast as quicksort on average.
\section See_also See also
<code>\ref stldoc_stable_sort</code>,
<code>\ref stldoc_partial_sort</code>,
<code>\ref stldoc_partial_sort_copy</code>,
<code>\ref stldoc_sort_heap</code>,
<code>\ref stldoc_is_sorted</code>,
<code>\ref stldoc_binary_search</code>,
<code>\ref stldoc_lower_bound</code>,
<code>\ref stldoc_upper_bound</code>,
<code>\ref stldoc_less&lt;T&gt;</code>,
\ref stldoc_StrictWeakOrdering,
\ref stldoc_LessThanComparable


*/
