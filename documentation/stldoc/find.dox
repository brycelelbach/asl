/** \page stldoc_find find

<table cellpadding="0" cellspacing="0" width="100%" border="0">
<tr>
<td align="left">\image html algorithms.gif</td>
<td width="100%"></td>
<td align="right">\image html function.gif</td>
</tr>
<tr>
<td align="left" valign="top"><b>Category</b>: algorithms</td>
<td width="100%"></td>
<td align="right" valign="top"><b>Component type</b>: function</td>
</tr>
</table>

\section Prototype Prototype
\code
template<class InputIterator, class EqualityComparable>
InputIterator find(InputIterator first, InputIterator last,
                   const EqualityComparable& value);
\endcode
\section Description Description
Returns the first iterator <code>i</code> in the range <code>[first, last)</code> such that
<code>*i == value</code>.  Returns <code>last</code> if no such iterator exists.
\section Definition Definition
Defined in the standard header <A href="algorithm">algorithm</A>, and in the nonstandard
backward-compatibility header <A href="algo.h">algo.h</A>.
\section Requirements_on_types Requirements on types
<ul>
<li>
EqualityComparable is a model of \ref stldoc_EqualityComparable.
<li>
InputIterator is a model of \ref stldoc_InputIterator.
<li>
Equality is defined between objects of type EqualityComparable and
   objects of InputIterator's value type.
</ul>
\section Preconditions Preconditions
<ul>
<li>
<code>[first, last)</code> is a valid range.
</ul>
\section Complexity Complexity
Linear: at most <code>last - first</code> comparisons for equality.
\section Example Example
\code
List<int> L;
L.push_back(3);
L.push_back(1);
L.push_back(7);

List<int>::iterator result = find(L.begin(), L.end(), 7);
assert(result == L.end() || *result == 7);
\endcode
\section Notes Notes
\section See_also See also
\ref stldoc_find_if.


*/
