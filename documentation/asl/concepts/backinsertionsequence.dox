/**
\defgroup stldoc_BackInsertionSequence BackInsertionSequence
\ingroup asl_concepts

\description
A Back Insertion Sequence is a Sequence where it is possible
to append an element to the end, or to access the last element,
in amortized constant time.  Back Insertion Sequences have special
member functions as a shorthand for those operations.

\refinement_of
Sequence

\associated_types
None, except for those of Sequence.

\notation
<table>
<tr>
<td valign="top">
<code>X</code>
</td>
<td valign="top">
A type that is a model of Back Insertion Sequence
</td>
</tr>
<tr>
<td valign="top">
<code>a</code>
</td>
<td valign="top">
Object of type <code>X</code>
</td>
</tr>
<tr>
<td valign="top">
<code>T</code>
</td>
<td valign="top">
The value type of <code>X</code>
</td>
</tr>
<tr>
<td valign="top">
<code>t</code>
</td>
<td valign="top">
Object of type <code>T</code>
</td>
</tr>
</table>

\definitions

\valid_expressions
In addition to the expressions defined in Sequence, the following
expressions must be valid.
<table border='1'>
<tr>
<TH>
Name
</TH>
<TH>
Expression
</TH>
<TH>
Type requirements
</TH>
<TH>
Return type
</TH>
</tr>
<tr>
<td valign="top">
Back
</td>
<td valign="top">
<code>a.back()</code>
</td>
<td valign="top">
&nbsp;
</td>
<td valign="top">
<code>reference</code> if <code>a</code> is mutable, otherwise <code>const_reference</code>.
</td>
</tr>
<tr>
<td valign="top">
Push back
</td>
<td valign="top">
<code>a.push_back(t)</code>
</td>
<td valign="top">
<code>a</code> is mutable.
</td>
<td valign="top">
<code>void</code>
</td>
</tr>
<tr>
<td valign="top">
Pop back
</td>
<td valign="top">
<code>a.pop_back()</code>
</td>
<td valign="top">
<code>a</code> is mutable.
</td>
<td valign="top">
<code>void</code>
</td>
</tr>
</table>

\expression_semantics
<table border='1'>
<tr>
<TH>
Name
</TH>
<TH>
Expression
</TH>
<TH>
Precondition
</TH>
<TH>
Semantics
</TH>
<TH>
Postcondition
</TH>
</tr>
<tr>
<td valign="top">
Back
</td>
<td valign="top">
<code>a.back()</code>
</td>
<td valign="top">
<code>!a.empty()</code>
</td>
<td valign="top">
Equivalent to <code>*(--a.end())</code>.
</td>
<td valign="top">
&nbsp;
</td>
</tr>
<tr>
<td valign="top">
Push back
</td>
<td valign="top">
<code>a.push_back(t)</code>
</td>
<td valign="top">
&nbsp;
</td>
<td valign="top">
Equivalent to <code>a.insert(a.end(), t)</code>
</td>
<td valign="top">
<code>a.size</code> is incremented by 1. <code>a.back()</code> is a copy of <code>t</code>.
</td>
</tr>
<tr>
<td valign="top">
Pop back
</td>
<td valign="top">
<code>a.pop_back()</code>
</td>
<td valign="top">
<code>!a.empty()</code>
</td>
<td valign="top">
Equivalent to <code>a.erase(--a.end())</code>
</td>
<td valign="top">
<code>a.size()</code> is decremented by 1.
</td>
</tr>
</table>

\complexity
Back, push back, and pop back are amortized constant time. <A href="#1">[1]</A>

\invariants
<table border='1'>
<tr>
<td valign="top">
Symmetry of push and pop
</td>
<td valign="top">
<code>push_back()</code> followed by <code>pop_back()</code> is a null operation.
</td>
</tr>
</table>

\models
<ul>
<li>
 Vector
<li>
 List
<li>
 Deque
</ul>

\notes
<p><A name="1">[1]</A>
This complexity guarantee is the only reason that <code>back()</code>,
<code>push_back()</code>, and <code>pop_back()</code> are defined: they provide
no additional functionality.  Not every sequence must define these
operations, but it is guaranteed that they are efficient if they
exist at all.

\see_also
Container, Sequence, FrontInsertionSequence,
<code>Vector</code>, <code>Deque</code>, <code>List</code>
*/
