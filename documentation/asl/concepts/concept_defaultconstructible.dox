/*************************************************************************************************/

/*

    ADOBE CONFIDENTIAL
    ___________________

    Copyright 2003 - 2003 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: All information contained herein is, and remains the property of
    Adobe Systems Incorporated and its suppliers, if any. The intellectual and 
    technical concepts contained herein are proprietary to Adobe Systems Incorporated 
    and its suppliers and may be covered by U.S. and Foreign Patents, patents 
    in process, and are protected by trade secret or copyright law. Dissemination 
    of this information or reproduction of this material is strictly forbidden 
    unless prior written permission is obtained from Adobe Systems Incorporated.
 
*/

/*************************************************************************************************/

/*! \defgroup stldoc_DefaultConstructible DefaultConstructible
\ingroup asl_concepts

\description
A type is DefaultConstructible if it has a default constructor, that is, if it is possible to construct an object of that type without initializing the object to any particular value.

\refinement_of

\associated_types

\notation
<table>
    <tr>
        <td valign="top"><code>X</code></td>
        <td valign="top">A type that is a model of DefaultConstructible</td>
    </tr>
    <tr>
        <td valign="top"><code>x</code></td>
        <td valign="top">An object of type <code>X</code></td>
    </tr>
</table>

\definitions

\valid_expressions
<table>
    <tr>
        <th>Name</th><th>Expression</th><th>Type requirements</th><th>Return type</th>
    </tr>
    <tr>
        <td valign="top">Default constructor</td>
        <td valign="top"><code>X()</code></td>
        <td valign="top">&nbsp;</td>
        <td valign="top"><code>X</code></td>
    </tr>
    <tr>
        <td valign="top">Default constructor</td>
        <td valign="top"><code>X x;</code> <A href="#1">[1]</A></td>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
    </tr>
</table>

\expression_semantics
<table>
    <tr>
        <th>Name</th><th>Expression</th><th>Precondition</th><th>Semantics</th><th>Postcondition</th>
    </tr>
    <tr>
        <td valign="top">Default constructor</td>
        <td valign="top"><code>X()</code></td>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
    </tr>
    <tr>
        <td valign="top">Default constructor</td>
        <td valign="top"><code>X x;</code></td>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
    </tr>
</table>

\complexity

\models
    - int
    - adobe::name_t
    - adobe::copy_on_write

\notes
<A name="1">[1]</A>
The form <code>X x = X()</code> is not guaranteed to be a valid expression, because it uses a copy constructor.  A type that is DefaultConstructible is not necessarily \ref stldoc_Assignable

\see_also
    - \ref stldoc_Assignable
*/
