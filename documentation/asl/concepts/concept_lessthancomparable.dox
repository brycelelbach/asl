/*************************************************************************************************/

/*

    ADOBE CONFIDENTIAL
    ___________________

    Copyright 2003 - 2003 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: All information contained herein is, and remains the property of
    Adobe Systems Incorporated and its suppliers, if any. The intellectual and 
    technical concepts contained herein are proprietary to Adobe Systems Incorporated 
    and its suppliers and may be covered by U.S. and Foreign Patents, patents 
    in process, and are protected by trade secret or copyright law. Dissemination 
    of this information or reproduction of this material is strictly forbidden 
    unless prior written permission is obtained from Adobe Systems Incorporated.
 
*/

/*************************************************************************************************/

/*! \defgroup stldoc_LessThanComparable LessThanComparable
\ingroup asl_concepts

\description
A type is LessThanComparable if it is ordered: it must
be possible to compare two objects of that type using <code>operator< </code>, and
<code>operator< </code> must be a partial ordering.

\refinement_of

\associated_types

\notation
<table>
    <tr>
        <td valign="top"><code>X</code></td>
        <td valign="top">A type that is a model of LessThanComparable</td>
    </tr>
    <tr>
        <td valign="top"><code>x</code>, <code>y</code>, <code>z</code></td>
        <td valign="top">Object of type <code>X</code></td>
    </tr>
</table>

\definitions
Consider the relation <code>!(x &lt; y) &amp;&amp; !(y &lt; x)</code>.  If this relation is
transitive (that is, if <code>!(x &lt; y) &amp;&amp; !(y &lt; x) &amp;&amp; !(y &lt; z) &amp;&amp; !(z &lt; y)</code>
implies <code>!(x &lt; z) &amp;&amp; !(z &lt; x)</code>), then it satisfies the mathematical
definition of an equivalence relation.  In this case, <code>operator< </code>
is a <i>strict weak ordering</i>.
\par
If <code>operator< </code> is a strict weak ordering, and if each equivalence class
has only a single element, then <code>operator< </code> is a <i>total ordering</i>.

\valid_expressions
<table>
    <tr>
        <th>Name</th><th>Expression</th><th>Type requirements</th><th>Return type</th>
    </tr>
    <tr>
        <td valign="top">Less</td>
        <td valign="top"><code>x &lt; y</code></td>
        <td valign="top">&nbsp;</td>
        <td valign="top">Convertible to <code>bool</code></td>
    </tr>
    <tr>
        <td valign="top">Greater</td>
        <td valign="top"><code>x &gt; y</code></td>
        <td valign="top">&nbsp;</td>
        <td valign="top">Convertible to <code>bool</code></td>
    </tr>
    <tr>
        <td valign="top">Less or equal</td>
        <td valign="top"><code>x &lt;= y</code></td>
        <td valign="top">&nbsp;</td>
        <td valign="top">Convertible to <code>bool</code></td>
    </tr>
    <tr>
        <td valign="top">Greater or equal</td>
        <td valign="top"><code>x &gt;= y</code></td>
        <td valign="top">&nbsp;</td>
        <td valign="top">Convertible to <code>bool</code></td>
    </tr>
</table>

\expression_semantics
<table>
    <tr>
        <th>Name</th><th>Expression</th><th>Precondition</th><th>Semantics</th><th>Postcondition</th>
    </tr>
    <tr>
        <td valign="top">Less</td>
        <td valign="top"><code>x &lt; y</code></td>
        <td valign="top"><code>x</code> and <code>y</code> are in the domain of <code>&lt;</code></td>
        <td valign="top">&nbsp;</td>
        <td valign="top">&nbsp;</td>
    </tr>
    <tr>
        <td valign="top">Greater</td>
        <td valign="top"><code>x &gt; y</code></td>
        <td valign="top"><code>x</code> and <code>y</code> are in the domain of <code>&lt;</code></td>
        <td valign="top">Equivalent to <code>y &lt; x</code> <A href="#1">[1]</A></td>
        <td valign="top">&nbsp;</td>
    </tr>
    <tr>
        <td valign="top">Less or equal</td>
        <td valign="top"><code>x &lt;= y</code></td>
        <td valign="top"><code>x</code> and <code>y</code> are in the domain of <code>&lt;</code></td>
        <td valign="top">Equivalent to <code>!(y &lt; x)</code> <A href="#1">[1]</A></td>
        <td valign="top">&nbsp;</td>
    </tr>
    <tr>
        <td valign="top">Greater or equal</td>
        <td valign="top"><code>x &gt;= y</code></td>
        <td valign="top"><code>x</code> and <code>y</code> are in the domain of <code>&lt;</code></td>
        <td valign="top">Equivalent to <code>!(x &lt; y)</code> <A href="#1">[1]</A></td>
        <td valign="top">&nbsp;</td>
    </tr>
</table>

\complexity

\invariants
<table>
    <tr>
        <td valign="top">Irreflexivity</td>
        <td valign="top"><code>x &lt; x</code> must be false.</td>
    </tr>
    <tr>
        <td valign="top">Antisymmetry</td>
        <td valign="top"><code>x &lt; y</code> implies !(y &lt; x) <A href="#2">[2]</A></td>
    </tr>
    <tr>
        <td valign="top">Transitivity</td>
        <td valign="top"><code>x &lt; y</code> and <code>y &lt; z</code> implies <code>x &lt; z</code> <A href="#3">[3]</A></td>
    </tr>
</table>

\models
    - int
    - adobe::name_t

\notes
<A name="1">[1]</A>
Only <code>operator< </code> is fundamental; the other inequality operators are essentially syntactic sugar.
\par
<A name="2">[2]</A>
Antisymmetry is a theorem, not an axiom: it follows from irreflexivity and transitivity.
\par
<A name="3">[3]</A>
Because of irreflexivity and transitivity, <code>operator< </code> always satisfies the definition of a <i>partial ordering</i>.  The definition of a <i>strict weak ordering</i> is stricter, and the definition of a <i>total ordering</i> is stricter still.

\see_also
    - \ref stldoc_EqualityComparable
*/
