diff -wur --unidirectional-new-file -x status -x adobe_information -x bin.v2 ../diffable_boost_1_35_0/boost/thread/win32/condition_variable.hpp ../boost_libraries/boost/thread/win32/condition_variable.hpp
--- ../diffable_boost_1_35_0/boost/thread/win32/condition_variable.hpp	2008-03-21 08:04:10.000000000 -0700
+++ ../boost_libraries/boost/thread/win32/condition_variable.hpp	2008-05-01 18:08:23.437500000 -0700
@@ -14,6 +14,8 @@
 #include <boost/thread/thread_time.hpp>
 #include "interlocked_read.hpp"
 #include <boost/thread/xtime.hpp>
+#include <vector>
+#include <boost/intrusive_ptr.hpp>
 
 namespace boost
 {
@@ -27,70 +29,48 @@
 
             struct list_entry
             {
-                detail::win32::handle semaphore;
-                long count;
+                detail::win32::handle_manager semaphore;
+                detail::win32::handle_manager wake_sem;
+                long waiters;
                 bool notified;
+                long references;
 
                 list_entry():
-                    semaphore(0),count(0),notified(0)
+                    semaphore(detail::win32::create_anonymous_semaphore(0,LONG_MAX)),
+                    wake_sem(0),
+                    waiters(1),notified(false),references(0)
                 {}
-            };
-
-            BOOST_STATIC_CONSTANT(unsigned,generation_count=3);
-
-            list_entry generations[generation_count];
-            detail::win32::handle wake_sem;
 
-            static bool no_waiters(list_entry const& entry)
+                void release(unsigned count_to_release)
             {
-                return entry.count==0;
+                    notified=true;
+                    detail::win32::ReleaseSemaphore(semaphore,count_to_release,0);
             }
 
-            void shift_generations_down()
+                friend void intrusive_ptr_add_ref(list_entry * p)
             {
-                list_entry* const last_active_entry=std::remove_if(generations,generations+generation_count,no_waiters);
-                if(last_active_entry==generations+generation_count)
-                {
-                    broadcast_entry(generations[generation_count-1],false);
-                }
-                else
-                {
-                    active_generation_count=unsigned(last_active_entry-generations)+1;
-                }
-
-#ifdef BOOST_MSVC
-#pragma warning(push)
-#pragma warning(disable:4996)
-#endif
-                std::copy_backward(generations,generations+active_generation_count-1,generations+active_generation_count);
-#ifdef BOOST_MSVC
-#pragma warning(pop)
-#endif
-                generations[0]=list_entry();
+                    BOOST_INTERLOCKED_INCREMENT(&p->references);
             }
 
-            void broadcast_entry(list_entry& entry,bool wake)
+                friend void intrusive_ptr_release(list_entry * p)
             {
-                long const count_to_wake=entry.count;
-                detail::interlocked_write_release(&total_count,total_count-count_to_wake);
-                if(wake)
+                    if(!BOOST_INTERLOCKED_DECREMENT(&p->references))
                 {
-                    detail::win32::ReleaseSemaphore(wake_sem,count_to_wake,0);
+                        delete p;
                 }
-                detail::win32::ReleaseSemaphore(entry.semaphore,count_to_wake,0);
-                entry.count=0;
-                dispose_entry(entry);
             }
+            };
         
+            typedef boost::intrusive_ptr<list_entry> entry_ptr;
+            typedef std::vector<entry_ptr> generation_list;
 
-            void dispose_entry(list_entry& entry)
-            {
-                if(entry.semaphore)
+            generation_list generations;
+            detail::win32::handle_manager wake_sem;
+
+            void wake_waiters(long count_to_wake)
                 {
-                    BOOST_VERIFY(detail::win32::CloseHandle(entry.semaphore));
-                    entry.semaphore=0;
-                }
-                entry.notified=false;
+                detail::interlocked_write_release(&total_count,total_count-count_to_wake);
+                detail::win32::ReleaseSemaphore(wake_sem,count_to_wake,0);
             }
 
             template<typename lock_type>
@@ -116,72 +96,79 @@
                     
                 }
             private:
+                relocker(relocker&);
                 void operator=(relocker&);
             };
             
 
-            template<typename lock_type>
-            void start_wait_loop_first_time(relocker<lock_type>& locker,
-                                            detail::win32::handle_manager& local_wake_sem)
+            entry_ptr get_wait_entry()
             {
-                locker.unlock();
+                boost::lock_guard<boost::mutex> internal_lock(internal_mutex);
+
                 if(!wake_sem)
                 {
                     wake_sem=detail::win32::create_anonymous_semaphore(0,LONG_MAX);
                     BOOST_ASSERT(wake_sem);
                 }
-                local_wake_sem=detail::win32::duplicate_handle(wake_sem);
                         
-                if(generations[0].notified)
+                detail::interlocked_write_release(&total_count,total_count+1);
+                if(generations.empty() || generations.back()->notified)
                 {
-                    shift_generations_down();
+                    entry_ptr new_entry(new list_entry);
+                    new_entry->wake_sem=wake_sem.duplicate();
+                    generations.push_back(new_entry);
+                    return new_entry;
                 }
-                else if(!active_generation_count)
+                else
                 {
-                    active_generation_count=1;
+                    BOOST_INTERLOCKED_INCREMENT(&generations.back()->waiters);
+                    return generations.back();
                 }
             }
             
-            template<typename lock_type>
-            void start_wait_loop(relocker<lock_type>& locker,
-                                 detail::win32::handle_manager& local_wake_sem,
-                                 detail::win32::handle_manager& sem)
+            struct entry_manager
             {
-                boost::mutex::scoped_lock internal_lock(internal_mutex);
-                detail::interlocked_write_release(&total_count,total_count+1);
-                if(!local_wake_sem)
+                entry_ptr const entry;
+                    
+                entry_manager(entry_ptr const& entry_):
+                    entry(entry_)
+                {}
+                    
+                ~entry_manager()
                 {
-                    start_wait_loop_first_time(locker,local_wake_sem);
+                    BOOST_INTERLOCKED_DECREMENT(&entry->waiters);
                 }
-                if(!generations[0].semaphore)
+
+                list_entry* operator->()
                 {
-                    generations[0].semaphore=detail::win32::create_anonymous_semaphore(0,LONG_MAX);
-                    BOOST_ASSERT(generations[0].semaphore);
-                }
-                ++generations[0].count;
-                sem=detail::win32::duplicate_handle(generations[0].semaphore);
+                    return entry.get();
             }
 
+            private:
+                void operator=(entry_manager&);
+                entry_manager(entry_manager&);
+            };
+                
+
         protected:
             template<typename lock_type>
             bool do_wait(lock_type& lock,timeout wait_until)
             {
-                detail::win32::handle_manager local_wake_sem;
-                detail::win32::handle_manager sem;
-                bool woken=false;
-
                 relocker<lock_type> locker(lock);
             
+                entry_manager entry(get_wait_entry());
+
+                locker.unlock();
+
+                bool woken=false;
                 while(!woken)
                 {
-                    start_wait_loop(locker,local_wake_sem,sem);
-                    
-                    if(!this_thread::interruptible_wait(sem,wait_until))
+                    if(!this_thread::interruptible_wait(entry->semaphore,wait_until))
                     {
                         return false;
                     }
                 
-                    unsigned long const woken_result=detail::win32::WaitForSingleObject(local_wake_sem,0);
+                    unsigned long const woken_result=detail::win32::WaitForSingleObject(entry->wake_sem,0);
                     BOOST_ASSERT(woken_result==detail::win32::timeout || woken_result==0);
 
                     woken=(woken_result==0);
@@ -202,45 +189,37 @@
         
             basic_condition_variable(const basic_condition_variable& other);
             basic_condition_variable& operator=(const basic_condition_variable& other);
+
+            static bool no_waiters(entry_ptr const& entry)
+            {
+                return !detail::interlocked_read_acquire(&entry->waiters);
+            }
         public:
             basic_condition_variable():
                 total_count(0),active_generation_count(0),wake_sem(0)
             {}
             
             ~basic_condition_variable()
-            {
-                for(unsigned i=0;i<generation_count;++i)
-                {
-                    dispose_entry(generations[i]);
-                }
-                detail::win32::CloseHandle(wake_sem);
-            }
-
+            {}
         
             void notify_one()
             {
                 if(detail::interlocked_read_acquire(&total_count))
                 {
                     boost::mutex::scoped_lock internal_lock(internal_mutex);
-                    detail::win32::ReleaseSemaphore(wake_sem,1,0);
-                    for(unsigned generation=active_generation_count;generation!=0;--generation)
+                    if(!total_count)
                     {
-                        list_entry& entry=generations[generation-1];
-                        if(entry.count)
-                        {
-                            detail::interlocked_write_release(&total_count,total_count-1);
-                            entry.notified=true;
-                            detail::win32::ReleaseSemaphore(entry.semaphore,1,0);
-                            if(!--entry.count)
-                            {
-                                dispose_entry(entry);
-                                if(generation==active_generation_count)
-                                {
-                                    --active_generation_count;
-                                }
-                            }
+                        return;
                         }
+                    wake_waiters(1);
+
+                    for(generation_list::iterator it=generations.begin(),
+                            end=generations.end();
+                        it!=end;++it)
+                    {
+                        (*it)->release(1);
                     }
+                    generations.erase(std::remove_if(generations.begin(),generations.end(),no_waiters),generations.end());
                 }
             }
         
@@ -249,15 +228,18 @@
                 if(detail::interlocked_read_acquire(&total_count))
                 {
                     boost::mutex::scoped_lock internal_lock(internal_mutex);
-                    for(unsigned generation=active_generation_count;generation!=0;--generation)
+                    if(!total_count)
                     {
-                        list_entry& entry=generations[generation-1];
-                        if(entry.count)
-                        {
-                            broadcast_entry(entry,true);
+                        return;
                         }
+                    wake_waiters(total_count);
+                    for(generation_list::iterator it=generations.begin(),
+                            end=generations.end();
+                        it!=end;++it)
+                    {
+                        (*it)->release(detail::interlocked_read_acquire(&(*it)->waiters));
                     }
-                    active_generation_count=0;
+                    wake_sem=detail::win32::handle(0);
                 }
             }
         
@@ -265,9 +247,18 @@
     }
 
     class condition_variable:
-        public detail::basic_condition_variable
+        private detail::basic_condition_variable
     {
+    private:
+        condition_variable(condition_variable&);
+        void operator=(condition_variable&);
     public:
+        condition_variable()
+        {}
+        
+        using detail::basic_condition_variable::notify_one;
+        using detail::basic_condition_variable::notify_all;
+        
         void wait(unique_lock<mutex>& m)
         {
             do_wait(m,detail::timeout::sentinel());
@@ -313,9 +304,18 @@
     };
     
     class condition_variable_any:
-        public detail::basic_condition_variable
+        private detail::basic_condition_variable
     {
+    private:
+        condition_variable_any(condition_variable_any&);
+        void operator=(condition_variable_any&);
     public:
+        condition_variable_any()
+        {}
+        
+        using detail::basic_condition_variable::notify_one;
+        using detail::basic_condition_variable::notify_all;
+        
         template<typename lock_type>
         void wait(lock_type& m)
         {
diff -wur --unidirectional-new-file -x status -x adobe_information -x bin.v2 ../diffable_boost_1_35_0/libs/filesystem/build/Jamfile.v2 ../boost_libraries/libs/filesystem/build/Jamfile.v2
--- ../diffable_boost_1_35_0/libs/filesystem/build/Jamfile.v2	2007-11-15 14:26:15.000000000 -0800
+++ ../boost_libraries/libs/filesystem/build/Jamfile.v2	2008-04-22 09:56:22.265625000 -0700
@@ -11,6 +11,7 @@
 project boost/filesystem
     : source-location ../src
     : usage-requirements # pass these requirement to dependents (i.e. users)
+      <library>/boost/system
       <link>shared:<define>BOOST_FILESYSTEM_DYN_LINK=1
       <link>static:<define>BOOST_FILESYSTEM_STATIC_LINK=1
     ;
Only in ../diffable_boost_1_35_0/libs/filesystem/src: exception.cpp
diff -wur --unidirectional-new-file -x status -x adobe_information -x bin.v2 ../diffable_boost_1_35_0/libs/serialization/borland6ide/test_simple_class.bpf ../boost_libraries/libs/serialization/borland6ide/test_simple_class.bpf
--- ../diffable_boost_1_35_0/libs/serialization/borland6ide/test_simple_class.bpf	2007-10-22 18:47:48.000000000 -0700
+++ ../boost_libraries/libs/serialization/borland6ide/test_simple_class.bpf	2008-04-22 10:00:56.468750000 -0700
@@ -1,3 +1,4 @@
 This file is used by the project manager only and should be treated like the project file
 
+
 
main 
\ No newline at end of file
diff -wur --unidirectional-new-file -x status -x adobe_information -x bin.v2 ../diffable_boost_1_35_0/libs/system/src/error_code.cpp ../boost_libraries/libs/system/src/error_code.cpp
--- ../diffable_boost_1_35_0/libs/system/src/error_code.cpp	2007-11-02 17:49:07.000000000 -0700
+++ ../boost_libraries/libs/system/src/error_code.cpp	2008-04-22 10:01:40.218750000 -0700
@@ -15,6 +15,15 @@
 //  But the wording of the warning is misleading and unsettling, there are no
 //  portable alternative functions, and VC++ 8.0's own libraries use the
 //  functions in question. So turn off the warnings.
+
+#ifdef _CRT_SECURE_NO_DEPRECATE
+#undef _CRT_SECURE_NO_DEPRECATE
+#endif
+
+#ifdef _SCL_SECURE_NO_DEPRECATE
+#undef _SCL_SECURE_NO_DEPRECATE
+#endif
+
 #define _CRT_SECURE_NO_DEPRECATE
 #define _SCL_SECURE_NO_DEPRECATE
 
diff -wur --unidirectional-new-file -x status -x adobe_information -x bin.v2 ../diffable_boost_1_35_0/p4config ../boost_libraries/p4config
--- ../diffable_boost_1_35_0/p4config	1969-12-31 16:00:00.000000000 -0800
+++ ../boost_libraries/p4config	2008-04-22 09:51:30.750000000 -0700
@@ -0,0 +1,4 @@
+P4PORT=boxer.corp.adobe.com:1770
+P4CLIENT=mmarcus-690
+P4USER=mmarcus
+P4PASSWD=toruS678
Only in ../diffable_boost_1_35_0: regression
diff -wur --unidirectional-new-file -x status -x adobe_information -x bin.v2 ../diffable_boost_1_35_0/tools/build/v2/tools/msvc.jam ../boost_libraries/tools/build/v2/tools/msvc.jam
--- ../diffable_boost_1_35_0/tools/build/v2/tools/msvc.jam	2008-03-15 11:55:28.000000000 -0700
+++ ../boost_libraries/tools/build/v2/tools/msvc.jam	2008-04-22 10:02:39.312500000 -0700
@@ -638,6 +638,11 @@
 #
 # Declare flags and action for compilation
 #
+
+# Secure STL feature
+
+feature.feature stl-security-theater : off on : propagated link-incompatible ;
+
 feature.feature debug-store : object database : propagated ;
 
 flags msvc.compile CFLAGS <optimization>speed : /O2 ;
@@ -662,6 +667,9 @@
 flags msvc.compile C++FLAGS  <exception-handling>on/<asynch-exceptions>off/<extern-c-nothrow>on : /EHsc ;
 flags msvc.compile C++FLAGS  <exception-handling>on/<asynch-exceptions>on/<extern-c-nothrow>off : /EHa ;
 flags msvc.compile C++FLAGS  <exception-handling>on/<asynch-exceptions>on/<extern-c-nothrow>on : /EHac ;
+flags msvc.compile C++FLAGS  <stl-security-theater>off : /D_SECURE_SCL=0 ;
+flags msvc.compile C++FLAGS  <stl-security-theater>on : /D_SCL_SECURE=1 ;
+
 
 # By default 8.0 enables rtti support while prior versions disabled it. We
 # simply enable or disable it expliclty so we do not have to depend on this
diff -wur --unidirectional-new-file -x status -x adobe_information -x bin.v2 ../diffable_boost_1_35_0/tools/jam/src/expand.c ../boost_libraries/tools/jam/src/expand.c
--- ../diffable_boost_1_35_0/tools/jam/src/expand.c	2007-09-16 17:54:20.000000000 -0700
+++ ../boost_libraries/tools/jam/src/expand.c	2008-05-05 13:20:47.750000000 -0700
@@ -749,7 +749,8 @@
     assert(l != 0);
     assert(list_next(l) == 0);
     # ifdef OS_CYGWIN
-    assert( !strcmp( l->string, "c:\\foo\\bar" ) );
+    assert( strcmp( l->string, "c:\\foo\\bar" ) == 0 ||
+	    strcmp( l->string, "C:\\foo\\bar" ) == 0);
     # else 
     assert( !strcmp( l->string, cygpath ) );
     # endif   
