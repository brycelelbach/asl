//  Copyright 2005-2006 Adobe Systems Incorporated
//  Distributed under the MIT License (see accompanying file LICENSE_1_0_0.txt
//  or a copy at http://stlab.adobe.com/licenses.html)
//
//  $Id: //source_release/xcode_ide/adobe_xconfig_application.xcconfig#7 $
//  $DateTime: 2010/11/04 15:18:36 $
//  $Change: 4110 $
//  $Author: sparent $
//
//  This file is intended to be included as the project-level to your XCode
//  projects. It should be augmented with adobe_debug.xcconfig or
//  adobe_release.xcconfig, which are to be included at the target configuration
//  level of your project.

//  ****** Settings Prefix ******
//
//  Sets up default settings which may be overridden later.
//
//  Make sure this is the *first* file included in this configuration file.

#include "xci_prefix.xcconfig"

//  ****** Project-Specific Settings ******
//
//  Miscellaneous settings specifically for this project that are not covered
//  below.

#include "xci_libsettings_asl.xcconfig"
#include "xci_libsettings_boost.xcconfig"
#include "xci_libsettings_intel_tbb.xcconfig"
// #include "xci_libsettings_adobe_platform.xcconfig"

HEADER_SEARCH_PATHS = $(BOOST_HEADER_SEARCH_PATHS) $(INTEL_TBB_HEADER_SEARCH_PATHS) $(ASL_HEADER_SEARCH_PATHS) $(ASL_PLATFORM_HEADER_SEARCH_PATHS)
GCC_PREPROCESSOR_DEFINITIONS = $(BOOST_GCC_PREPROCESSOR_DEFINITIONS) $(INTEL_TBB_GCC_PREPROCESSOR_DEFINITIONS) $(ASL_GCC_PREPROCESSOR_DEFINITIONS)
LIBRARY_SEARCH_PATH = $(ASL_LIBRARY_SEARCH_PATHS)

//  ****** Target Type ******
//
//  What kind of thing are you building. Currently two options:
//      - application: excutable application
//      - staticlib: static library
//
//  Include ONLY ONE of the below options.

// #include "xci_target_type_staticlib.xcconfig"
#include "xci_target_type_application.xcconfig"

//  ****** Symbol Visibility ******
//
//  Specifies the external representation of the symbols within your artifact,
//  whether or not they are visible from outside. There are two options:
//      - hidden: makes inlines and symbols private extern.
//      - visible: makes inlines and symbols public.
//
//  Include ONLY ONE of the below options.

#include "xci_symbol_visibility_hidden.xcconfig"
// #include "xci_symbol_visibility_visible.xcconfig"

//  ****** C++ Library Binding Method ******
//
//  Specifies how your artifact is to bind agianst the C++ library. Note that
//  in order to link against the static library all dependencies for this target
//  must also link statically to the C++ library. Note static C++ library
//  binding has significant repercussions to the way your artifact is linked
//  (see the static xcconfig file for details of those settings.) There are two
//  options:
//      - static: binds against the statically-loaded C++ library.
//      - static_application: same as 'static' but with additional linker
//        flags required just for applications.
//      - dynamic: binds against the dynamically-loaded C++ library.
//
//  Include ONLY ONE of the below options.

// #include "xci_libcpp_static.xcconfig"
#include "xci_libcpp_static_application.xcconfig"
// #include "xci_libcpp_dynamic.xcconfig"

//  ****** Debugging Symbols ******
//
//  Debug symbols can be made available for either debug or release versions.
//  There are three options:
//      - STABS: big, bulky, pre XCode 2.2. Avoid if possible.
//      - DWARF: XCode 2.3 and beyond. Smaller, faster, but requries
//        object files (.o) in order to debug.
//      - DWARF-with-dSYM: same as dwarf, but pulls the symbols out of
//        the object files and into an external file that resides as a
//        sibling to the binary. Slows link and debug times a lot.
//
//  Include ZERO OR ONE of the below options.

#include "xci_debug_symbols_dsym_dwarf.xcconfig"
// #include "xci_debug_symbols_dwarf.xcconfig"
// #include "xci_debug_symbols_stabs.xcconfig"

//  ****** Artifact Architecture ******
//
//  Specifies against what platform(s) your artifact will be built. Note that
//  the adobe_release.xcconfig will specify the binary be built as
//  both the ppc and i386 (aka universal). Specifying none means "native". There
//  are three options:
//      - ppc: builds classic PowerPC binaries
//      - i386: builds "MacTel" binaries
//      - fat: builds universal binaries
//
//  Include ZERO OR ONE of the below options.

// #include "xci_arch_ppc.xcconfig"
// #include "xci_arch_i386.xcconfig"
// #include "xci_arch_fat.xcconfig"

//  ****** Minumum Operating System Requirement ******
//
//  Code will load on this and later versions of Mac OS X. Framework APIs that
//  are unavailable in earlier versions will be weak-linked; your code should
//  check for null function pointers or specific system versions before calling
//  newer APIs. Specifying none means the binary will load on any Mac OS system
//  that supports the APIs that are used.
//
//  Include ZERO OR ONE of the below options.

// MACOSX_DEPLOYMENT_TARGET = 10.1
// MACOSX_DEPLOYMENT_TARGET = 10.2
// MACOSX_DEPLOYMENT_TARGET = 10.3
// MACOSX_DEPLOYMENT_TARGET = 10.4
MACOSX_DEPLOYMENT_TARGET = 10.5
GCC_VERSION = 4.2

//  ****** Code Stripping ******
//
//  Handles whether or not you would like to strip out certain aspects of the
//  binary to reduce footprint size. There are several kinds:
//      - Dead Code: Code that is not reached is stripped out. This still
//        preserves inits and terms for dead-stripped code.
//
//  Include AS MANY AS NEEDED of the below options.

#include "xci_strip_dead_code.xcconfig"

//  ****** Long Branching ******
//
//  If your application is too big you may start to see errors upon linking
//  that say something to the effect of "relocation overflow". In order to
//  deal with this you must specify long branching as a compiler flag.
//
//  Include AS NEEDED the below option.

#include "xci_long_branching.xcconfig"

//  ****** Setting Suffix ******
//
//  Finalizes settings specified above.
//
//  Make sure this is the *last* file included in this configuration file.

#include "xci_suffix.xcconfig"
